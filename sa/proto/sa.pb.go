// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sa/proto/sa.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/zzma/boulder/core/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegistrationID struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistrationID) Reset()         { *m = RegistrationID{} }
func (m *RegistrationID) String() string { return proto.CompactTextString(m) }
func (*RegistrationID) ProtoMessage()    {}
func (*RegistrationID) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{0}
}

func (m *RegistrationID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationID.Unmarshal(m, b)
}
func (m *RegistrationID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationID.Marshal(b, m, deterministic)
}
func (m *RegistrationID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationID.Merge(m, src)
}
func (m *RegistrationID) XXX_Size() int {
	return xxx_messageInfo_RegistrationID.Size(m)
}
func (m *RegistrationID) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationID.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationID proto.InternalMessageInfo

func (m *RegistrationID) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type JSONWebKey struct {
	Jwk                  []byte   `protobuf:"bytes,1,opt,name=jwk" json:"jwk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JSONWebKey) Reset()         { *m = JSONWebKey{} }
func (m *JSONWebKey) String() string { return proto.CompactTextString(m) }
func (*JSONWebKey) ProtoMessage()    {}
func (*JSONWebKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{1}
}

func (m *JSONWebKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JSONWebKey.Unmarshal(m, b)
}
func (m *JSONWebKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JSONWebKey.Marshal(b, m, deterministic)
}
func (m *JSONWebKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JSONWebKey.Merge(m, src)
}
func (m *JSONWebKey) XXX_Size() int {
	return xxx_messageInfo_JSONWebKey.Size(m)
}
func (m *JSONWebKey) XXX_DiscardUnknown() {
	xxx_messageInfo_JSONWebKey.DiscardUnknown(m)
}

var xxx_messageInfo_JSONWebKey proto.InternalMessageInfo

func (m *JSONWebKey) GetJwk() []byte {
	if m != nil {
		return m.Jwk
	}
	return nil
}

type AuthorizationID struct {
	Id                   *string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthorizationID) Reset()         { *m = AuthorizationID{} }
func (m *AuthorizationID) String() string { return proto.CompactTextString(m) }
func (*AuthorizationID) ProtoMessage()    {}
func (*AuthorizationID) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{2}
}

func (m *AuthorizationID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthorizationID.Unmarshal(m, b)
}
func (m *AuthorizationID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthorizationID.Marshal(b, m, deterministic)
}
func (m *AuthorizationID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizationID.Merge(m, src)
}
func (m *AuthorizationID) XXX_Size() int {
	return xxx_messageInfo_AuthorizationID.Size(m)
}
func (m *AuthorizationID) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizationID.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizationID proto.InternalMessageInfo

func (m *AuthorizationID) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type GetPendingAuthorizationRequest struct {
	RegistrationID  *int64  `protobuf:"varint,1,opt,name=registrationID" json:"registrationID,omitempty"`
	IdentifierType  *string `protobuf:"bytes,2,opt,name=identifierType" json:"identifierType,omitempty"`
	IdentifierValue *string `protobuf:"bytes,3,opt,name=identifierValue" json:"identifierValue,omitempty"`
	// Result must be valid until at least this Unix timestamp (nanos)
	ValidUntil           *int64   `protobuf:"varint,4,opt,name=validUntil" json:"validUntil,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPendingAuthorizationRequest) Reset()         { *m = GetPendingAuthorizationRequest{} }
func (m *GetPendingAuthorizationRequest) String() string { return proto.CompactTextString(m) }
func (*GetPendingAuthorizationRequest) ProtoMessage()    {}
func (*GetPendingAuthorizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{3}
}

func (m *GetPendingAuthorizationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPendingAuthorizationRequest.Unmarshal(m, b)
}
func (m *GetPendingAuthorizationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPendingAuthorizationRequest.Marshal(b, m, deterministic)
}
func (m *GetPendingAuthorizationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPendingAuthorizationRequest.Merge(m, src)
}
func (m *GetPendingAuthorizationRequest) XXX_Size() int {
	return xxx_messageInfo_GetPendingAuthorizationRequest.Size(m)
}
func (m *GetPendingAuthorizationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPendingAuthorizationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPendingAuthorizationRequest proto.InternalMessageInfo

func (m *GetPendingAuthorizationRequest) GetRegistrationID() int64 {
	if m != nil && m.RegistrationID != nil {
		return *m.RegistrationID
	}
	return 0
}

func (m *GetPendingAuthorizationRequest) GetIdentifierType() string {
	if m != nil && m.IdentifierType != nil {
		return *m.IdentifierType
	}
	return ""
}

func (m *GetPendingAuthorizationRequest) GetIdentifierValue() string {
	if m != nil && m.IdentifierValue != nil {
		return *m.IdentifierValue
	}
	return ""
}

func (m *GetPendingAuthorizationRequest) GetValidUntil() int64 {
	if m != nil && m.ValidUntil != nil {
		return *m.ValidUntil
	}
	return 0
}

type GetValidAuthorizationsRequest struct {
	RegistrationID       *int64   `protobuf:"varint,1,opt,name=registrationID" json:"registrationID,omitempty"`
	Domains              []string `protobuf:"bytes,2,rep,name=domains" json:"domains,omitempty"`
	Now                  *int64   `protobuf:"varint,3,opt,name=now" json:"now,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetValidAuthorizationsRequest) Reset()         { *m = GetValidAuthorizationsRequest{} }
func (m *GetValidAuthorizationsRequest) String() string { return proto.CompactTextString(m) }
func (*GetValidAuthorizationsRequest) ProtoMessage()    {}
func (*GetValidAuthorizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{4}
}

func (m *GetValidAuthorizationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetValidAuthorizationsRequest.Unmarshal(m, b)
}
func (m *GetValidAuthorizationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetValidAuthorizationsRequest.Marshal(b, m, deterministic)
}
func (m *GetValidAuthorizationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetValidAuthorizationsRequest.Merge(m, src)
}
func (m *GetValidAuthorizationsRequest) XXX_Size() int {
	return xxx_messageInfo_GetValidAuthorizationsRequest.Size(m)
}
func (m *GetValidAuthorizationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetValidAuthorizationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetValidAuthorizationsRequest proto.InternalMessageInfo

func (m *GetValidAuthorizationsRequest) GetRegistrationID() int64 {
	if m != nil && m.RegistrationID != nil {
		return *m.RegistrationID
	}
	return 0
}

func (m *GetValidAuthorizationsRequest) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetValidAuthorizationsRequest) GetNow() int64 {
	if m != nil && m.Now != nil {
		return *m.Now
	}
	return 0
}

type ValidAuthorizations struct {
	Valid                []*ValidAuthorizations_MapElement `protobuf:"bytes,1,rep,name=valid" json:"valid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ValidAuthorizations) Reset()         { *m = ValidAuthorizations{} }
func (m *ValidAuthorizations) String() string { return proto.CompactTextString(m) }
func (*ValidAuthorizations) ProtoMessage()    {}
func (*ValidAuthorizations) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{5}
}

func (m *ValidAuthorizations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidAuthorizations.Unmarshal(m, b)
}
func (m *ValidAuthorizations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidAuthorizations.Marshal(b, m, deterministic)
}
func (m *ValidAuthorizations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidAuthorizations.Merge(m, src)
}
func (m *ValidAuthorizations) XXX_Size() int {
	return xxx_messageInfo_ValidAuthorizations.Size(m)
}
func (m *ValidAuthorizations) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidAuthorizations.DiscardUnknown(m)
}

var xxx_messageInfo_ValidAuthorizations proto.InternalMessageInfo

func (m *ValidAuthorizations) GetValid() []*ValidAuthorizations_MapElement {
	if m != nil {
		return m.Valid
	}
	return nil
}

type ValidAuthorizations_MapElement struct {
	Domain               *string               `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Authz                *proto1.Authorization `protobuf:"bytes,2,opt,name=authz" json:"authz,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ValidAuthorizations_MapElement) Reset()         { *m = ValidAuthorizations_MapElement{} }
func (m *ValidAuthorizations_MapElement) String() string { return proto.CompactTextString(m) }
func (*ValidAuthorizations_MapElement) ProtoMessage()    {}
func (*ValidAuthorizations_MapElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{5, 0}
}

func (m *ValidAuthorizations_MapElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidAuthorizations_MapElement.Unmarshal(m, b)
}
func (m *ValidAuthorizations_MapElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidAuthorizations_MapElement.Marshal(b, m, deterministic)
}
func (m *ValidAuthorizations_MapElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidAuthorizations_MapElement.Merge(m, src)
}
func (m *ValidAuthorizations_MapElement) XXX_Size() int {
	return xxx_messageInfo_ValidAuthorizations_MapElement.Size(m)
}
func (m *ValidAuthorizations_MapElement) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidAuthorizations_MapElement.DiscardUnknown(m)
}

var xxx_messageInfo_ValidAuthorizations_MapElement proto.InternalMessageInfo

func (m *ValidAuthorizations_MapElement) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

func (m *ValidAuthorizations_MapElement) GetAuthz() *proto1.Authorization {
	if m != nil {
		return m.Authz
	}
	return nil
}

type CertificateStatus struct {
	Serial                *string  `protobuf:"bytes,1,opt,name=serial" json:"serial,omitempty"`
	Status                *string  `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	OcspLastUpdated       *int64   `protobuf:"varint,4,opt,name=ocspLastUpdated" json:"ocspLastUpdated,omitempty"`
	RevokedDate           *int64   `protobuf:"varint,5,opt,name=revokedDate" json:"revokedDate,omitempty"`
	RevokedReason         *int64   `protobuf:"varint,6,opt,name=revokedReason" json:"revokedReason,omitempty"`
	LastExpirationNagSent *int64   `protobuf:"varint,7,opt,name=lastExpirationNagSent" json:"lastExpirationNagSent,omitempty"`
	OcspResponse          []byte   `protobuf:"bytes,8,opt,name=ocspResponse" json:"ocspResponse,omitempty"`
	NotAfter              *int64   `protobuf:"varint,9,opt,name=notAfter" json:"notAfter,omitempty"`
	IsExpired             *bool    `protobuf:"varint,10,opt,name=isExpired" json:"isExpired,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *CertificateStatus) Reset()         { *m = CertificateStatus{} }
func (m *CertificateStatus) String() string { return proto.CompactTextString(m) }
func (*CertificateStatus) ProtoMessage()    {}
func (*CertificateStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{6}
}

func (m *CertificateStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateStatus.Unmarshal(m, b)
}
func (m *CertificateStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateStatus.Marshal(b, m, deterministic)
}
func (m *CertificateStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateStatus.Merge(m, src)
}
func (m *CertificateStatus) XXX_Size() int {
	return xxx_messageInfo_CertificateStatus.Size(m)
}
func (m *CertificateStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateStatus proto.InternalMessageInfo

func (m *CertificateStatus) GetSerial() string {
	if m != nil && m.Serial != nil {
		return *m.Serial
	}
	return ""
}

func (m *CertificateStatus) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *CertificateStatus) GetOcspLastUpdated() int64 {
	if m != nil && m.OcspLastUpdated != nil {
		return *m.OcspLastUpdated
	}
	return 0
}

func (m *CertificateStatus) GetRevokedDate() int64 {
	if m != nil && m.RevokedDate != nil {
		return *m.RevokedDate
	}
	return 0
}

func (m *CertificateStatus) GetRevokedReason() int64 {
	if m != nil && m.RevokedReason != nil {
		return *m.RevokedReason
	}
	return 0
}

func (m *CertificateStatus) GetLastExpirationNagSent() int64 {
	if m != nil && m.LastExpirationNagSent != nil {
		return *m.LastExpirationNagSent
	}
	return 0
}

func (m *CertificateStatus) GetOcspResponse() []byte {
	if m != nil {
		return m.OcspResponse
	}
	return nil
}

func (m *CertificateStatus) GetNotAfter() int64 {
	if m != nil && m.NotAfter != nil {
		return *m.NotAfter
	}
	return 0
}

func (m *CertificateStatus) GetIsExpired() bool {
	if m != nil && m.IsExpired != nil {
		return *m.IsExpired
	}
	return false
}

type Serial struct {
	Serial               *string  `protobuf:"bytes,1,opt,name=serial" json:"serial,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Serial) Reset()         { *m = Serial{} }
func (m *Serial) String() string { return proto.CompactTextString(m) }
func (*Serial) ProtoMessage()    {}
func (*Serial) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{7}
}

func (m *Serial) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Serial.Unmarshal(m, b)
}
func (m *Serial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Serial.Marshal(b, m, deterministic)
}
func (m *Serial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Serial.Merge(m, src)
}
func (m *Serial) XXX_Size() int {
	return xxx_messageInfo_Serial.Size(m)
}
func (m *Serial) XXX_DiscardUnknown() {
	xxx_messageInfo_Serial.DiscardUnknown(m)
}

var xxx_messageInfo_Serial proto.InternalMessageInfo

func (m *Serial) GetSerial() string {
	if m != nil && m.Serial != nil {
		return *m.Serial
	}
	return ""
}

type Range struct {
	Earliest             *int64   `protobuf:"varint,1,opt,name=earliest" json:"earliest,omitempty"`
	Latest               *int64   `protobuf:"varint,2,opt,name=latest" json:"latest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Range) Reset()         { *m = Range{} }
func (m *Range) String() string { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()    {}
func (*Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{8}
}

func (m *Range) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Range.Unmarshal(m, b)
}
func (m *Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Range.Marshal(b, m, deterministic)
}
func (m *Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Range.Merge(m, src)
}
func (m *Range) XXX_Size() int {
	return xxx_messageInfo_Range.Size(m)
}
func (m *Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Range proto.InternalMessageInfo

func (m *Range) GetEarliest() int64 {
	if m != nil && m.Earliest != nil {
		return *m.Earliest
	}
	return 0
}

func (m *Range) GetLatest() int64 {
	if m != nil && m.Latest != nil {
		return *m.Latest
	}
	return 0
}

type Count struct {
	Count                *int64   `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Count) Reset()         { *m = Count{} }
func (m *Count) String() string { return proto.CompactTextString(m) }
func (*Count) ProtoMessage()    {}
func (*Count) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{9}
}

func (m *Count) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Count.Unmarshal(m, b)
}
func (m *Count) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Count.Marshal(b, m, deterministic)
}
func (m *Count) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Count.Merge(m, src)
}
func (m *Count) XXX_Size() int {
	return xxx_messageInfo_Count.Size(m)
}
func (m *Count) XXX_DiscardUnknown() {
	xxx_messageInfo_Count.DiscardUnknown(m)
}

var xxx_messageInfo_Count proto.InternalMessageInfo

func (m *Count) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type CountCertificatesByNamesRequest struct {
	Range                *Range   `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
	Names                []string `protobuf:"bytes,2,rep,name=names" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountCertificatesByNamesRequest) Reset()         { *m = CountCertificatesByNamesRequest{} }
func (m *CountCertificatesByNamesRequest) String() string { return proto.CompactTextString(m) }
func (*CountCertificatesByNamesRequest) ProtoMessage()    {}
func (*CountCertificatesByNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{10}
}

func (m *CountCertificatesByNamesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountCertificatesByNamesRequest.Unmarshal(m, b)
}
func (m *CountCertificatesByNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountCertificatesByNamesRequest.Marshal(b, m, deterministic)
}
func (m *CountCertificatesByNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountCertificatesByNamesRequest.Merge(m, src)
}
func (m *CountCertificatesByNamesRequest) XXX_Size() int {
	return xxx_messageInfo_CountCertificatesByNamesRequest.Size(m)
}
func (m *CountCertificatesByNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountCertificatesByNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountCertificatesByNamesRequest proto.InternalMessageInfo

func (m *CountCertificatesByNamesRequest) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *CountCertificatesByNamesRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type CountByNames struct {
	CountByNames         []*CountByNames_MapElement `protobuf:"bytes,1,rep,name=countByNames" json:"countByNames,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CountByNames) Reset()         { *m = CountByNames{} }
func (m *CountByNames) String() string { return proto.CompactTextString(m) }
func (*CountByNames) ProtoMessage()    {}
func (*CountByNames) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{11}
}

func (m *CountByNames) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountByNames.Unmarshal(m, b)
}
func (m *CountByNames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountByNames.Marshal(b, m, deterministic)
}
func (m *CountByNames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountByNames.Merge(m, src)
}
func (m *CountByNames) XXX_Size() int {
	return xxx_messageInfo_CountByNames.Size(m)
}
func (m *CountByNames) XXX_DiscardUnknown() {
	xxx_messageInfo_CountByNames.DiscardUnknown(m)
}

var xxx_messageInfo_CountByNames proto.InternalMessageInfo

func (m *CountByNames) GetCountByNames() []*CountByNames_MapElement {
	if m != nil {
		return m.CountByNames
	}
	return nil
}

type CountByNames_MapElement struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Count                *int64   `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountByNames_MapElement) Reset()         { *m = CountByNames_MapElement{} }
func (m *CountByNames_MapElement) String() string { return proto.CompactTextString(m) }
func (*CountByNames_MapElement) ProtoMessage()    {}
func (*CountByNames_MapElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{11, 0}
}

func (m *CountByNames_MapElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountByNames_MapElement.Unmarshal(m, b)
}
func (m *CountByNames_MapElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountByNames_MapElement.Marshal(b, m, deterministic)
}
func (m *CountByNames_MapElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountByNames_MapElement.Merge(m, src)
}
func (m *CountByNames_MapElement) XXX_Size() int {
	return xxx_messageInfo_CountByNames_MapElement.Size(m)
}
func (m *CountByNames_MapElement) XXX_DiscardUnknown() {
	xxx_messageInfo_CountByNames_MapElement.DiscardUnknown(m)
}

var xxx_messageInfo_CountByNames_MapElement proto.InternalMessageInfo

func (m *CountByNames_MapElement) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CountByNames_MapElement) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type CountRegistrationsByIPRequest struct {
	Ip                   []byte   `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Range                *Range   `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountRegistrationsByIPRequest) Reset()         { *m = CountRegistrationsByIPRequest{} }
func (m *CountRegistrationsByIPRequest) String() string { return proto.CompactTextString(m) }
func (*CountRegistrationsByIPRequest) ProtoMessage()    {}
func (*CountRegistrationsByIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{12}
}

func (m *CountRegistrationsByIPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountRegistrationsByIPRequest.Unmarshal(m, b)
}
func (m *CountRegistrationsByIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountRegistrationsByIPRequest.Marshal(b, m, deterministic)
}
func (m *CountRegistrationsByIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountRegistrationsByIPRequest.Merge(m, src)
}
func (m *CountRegistrationsByIPRequest) XXX_Size() int {
	return xxx_messageInfo_CountRegistrationsByIPRequest.Size(m)
}
func (m *CountRegistrationsByIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountRegistrationsByIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountRegistrationsByIPRequest proto.InternalMessageInfo

func (m *CountRegistrationsByIPRequest) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *CountRegistrationsByIPRequest) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

type CountInvalidAuthorizationsRequest struct {
	RegistrationID *int64  `protobuf:"varint,1,opt,name=registrationID" json:"registrationID,omitempty"`
	Hostname       *string `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	// Count authorizations that expire in this range.
	Range                *Range   `protobuf:"bytes,3,opt,name=range" json:"range,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountInvalidAuthorizationsRequest) Reset()         { *m = CountInvalidAuthorizationsRequest{} }
func (m *CountInvalidAuthorizationsRequest) String() string { return proto.CompactTextString(m) }
func (*CountInvalidAuthorizationsRequest) ProtoMessage()    {}
func (*CountInvalidAuthorizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{13}
}

func (m *CountInvalidAuthorizationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountInvalidAuthorizationsRequest.Unmarshal(m, b)
}
func (m *CountInvalidAuthorizationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountInvalidAuthorizationsRequest.Marshal(b, m, deterministic)
}
func (m *CountInvalidAuthorizationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountInvalidAuthorizationsRequest.Merge(m, src)
}
func (m *CountInvalidAuthorizationsRequest) XXX_Size() int {
	return xxx_messageInfo_CountInvalidAuthorizationsRequest.Size(m)
}
func (m *CountInvalidAuthorizationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountInvalidAuthorizationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountInvalidAuthorizationsRequest proto.InternalMessageInfo

func (m *CountInvalidAuthorizationsRequest) GetRegistrationID() int64 {
	if m != nil && m.RegistrationID != nil {
		return *m.RegistrationID
	}
	return 0
}

func (m *CountInvalidAuthorizationsRequest) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *CountInvalidAuthorizationsRequest) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

type CountOrdersRequest struct {
	AccountID            *int64   `protobuf:"varint,1,opt,name=accountID" json:"accountID,omitempty"`
	Range                *Range   `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountOrdersRequest) Reset()         { *m = CountOrdersRequest{} }
func (m *CountOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*CountOrdersRequest) ProtoMessage()    {}
func (*CountOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{14}
}

func (m *CountOrdersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountOrdersRequest.Unmarshal(m, b)
}
func (m *CountOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountOrdersRequest.Marshal(b, m, deterministic)
}
func (m *CountOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountOrdersRequest.Merge(m, src)
}
func (m *CountOrdersRequest) XXX_Size() int {
	return xxx_messageInfo_CountOrdersRequest.Size(m)
}
func (m *CountOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountOrdersRequest proto.InternalMessageInfo

func (m *CountOrdersRequest) GetAccountID() int64 {
	if m != nil && m.AccountID != nil {
		return *m.AccountID
	}
	return 0
}

func (m *CountOrdersRequest) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

type CountFQDNSetsRequest struct {
	Window               *int64   `protobuf:"varint,1,opt,name=window" json:"window,omitempty"`
	Domains              []string `protobuf:"bytes,2,rep,name=domains" json:"domains,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountFQDNSetsRequest) Reset()         { *m = CountFQDNSetsRequest{} }
func (m *CountFQDNSetsRequest) String() string { return proto.CompactTextString(m) }
func (*CountFQDNSetsRequest) ProtoMessage()    {}
func (*CountFQDNSetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{15}
}

func (m *CountFQDNSetsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountFQDNSetsRequest.Unmarshal(m, b)
}
func (m *CountFQDNSetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountFQDNSetsRequest.Marshal(b, m, deterministic)
}
func (m *CountFQDNSetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountFQDNSetsRequest.Merge(m, src)
}
func (m *CountFQDNSetsRequest) XXX_Size() int {
	return xxx_messageInfo_CountFQDNSetsRequest.Size(m)
}
func (m *CountFQDNSetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountFQDNSetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountFQDNSetsRequest proto.InternalMessageInfo

func (m *CountFQDNSetsRequest) GetWindow() int64 {
	if m != nil && m.Window != nil {
		return *m.Window
	}
	return 0
}

func (m *CountFQDNSetsRequest) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

type FQDNSetExistsRequest struct {
	Domains              []string `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FQDNSetExistsRequest) Reset()         { *m = FQDNSetExistsRequest{} }
func (m *FQDNSetExistsRequest) String() string { return proto.CompactTextString(m) }
func (*FQDNSetExistsRequest) ProtoMessage()    {}
func (*FQDNSetExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{16}
}

func (m *FQDNSetExistsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FQDNSetExistsRequest.Unmarshal(m, b)
}
func (m *FQDNSetExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FQDNSetExistsRequest.Marshal(b, m, deterministic)
}
func (m *FQDNSetExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FQDNSetExistsRequest.Merge(m, src)
}
func (m *FQDNSetExistsRequest) XXX_Size() int {
	return xxx_messageInfo_FQDNSetExistsRequest.Size(m)
}
func (m *FQDNSetExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FQDNSetExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FQDNSetExistsRequest proto.InternalMessageInfo

func (m *FQDNSetExistsRequest) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

type PreviousCertificateExistsRequest struct {
	Domain               *string  `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	RegID                *int64   `protobuf:"varint,2,opt,name=regID" json:"regID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreviousCertificateExistsRequest) Reset()         { *m = PreviousCertificateExistsRequest{} }
func (m *PreviousCertificateExistsRequest) String() string { return proto.CompactTextString(m) }
func (*PreviousCertificateExistsRequest) ProtoMessage()    {}
func (*PreviousCertificateExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{17}
}

func (m *PreviousCertificateExistsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreviousCertificateExistsRequest.Unmarshal(m, b)
}
func (m *PreviousCertificateExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreviousCertificateExistsRequest.Marshal(b, m, deterministic)
}
func (m *PreviousCertificateExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreviousCertificateExistsRequest.Merge(m, src)
}
func (m *PreviousCertificateExistsRequest) XXX_Size() int {
	return xxx_messageInfo_PreviousCertificateExistsRequest.Size(m)
}
func (m *PreviousCertificateExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PreviousCertificateExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PreviousCertificateExistsRequest proto.InternalMessageInfo

func (m *PreviousCertificateExistsRequest) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

func (m *PreviousCertificateExistsRequest) GetRegID() int64 {
	if m != nil && m.RegID != nil {
		return *m.RegID
	}
	return 0
}

type Exists struct {
	Exists               *bool    `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Exists) Reset()         { *m = Exists{} }
func (m *Exists) String() string { return proto.CompactTextString(m) }
func (*Exists) ProtoMessage()    {}
func (*Exists) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{18}
}

func (m *Exists) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Exists.Unmarshal(m, b)
}
func (m *Exists) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Exists.Marshal(b, m, deterministic)
}
func (m *Exists) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exists.Merge(m, src)
}
func (m *Exists) XXX_Size() int {
	return xxx_messageInfo_Exists.Size(m)
}
func (m *Exists) XXX_DiscardUnknown() {
	xxx_messageInfo_Exists.DiscardUnknown(m)
}

var xxx_messageInfo_Exists proto.InternalMessageInfo

func (m *Exists) GetExists() bool {
	if m != nil && m.Exists != nil {
		return *m.Exists
	}
	return false
}

type AddCertificateRequest struct {
	Der   []byte `protobuf:"bytes,1,opt,name=der" json:"der,omitempty"`
	RegID *int64 `protobuf:"varint,2,opt,name=regID" json:"regID,omitempty"`
	// A signed OCSP response for the certificate contained in "der".
	// Note: The certificate status in the OCSP response is assumed to be 0 (good).
	Ocsp []byte `protobuf:"bytes,3,opt,name=ocsp" json:"ocsp,omitempty"`
	// An optional issued time. When not present the SA defaults to using
	// the current time. The orphan-finder uses this parameter to add
	// certificates with the correct historic issued date
	Issued               *int64   `protobuf:"varint,4,opt,name=issued" json:"issued,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddCertificateRequest) Reset()         { *m = AddCertificateRequest{} }
func (m *AddCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*AddCertificateRequest) ProtoMessage()    {}
func (*AddCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{19}
}

func (m *AddCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddCertificateRequest.Unmarshal(m, b)
}
func (m *AddCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddCertificateRequest.Marshal(b, m, deterministic)
}
func (m *AddCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCertificateRequest.Merge(m, src)
}
func (m *AddCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_AddCertificateRequest.Size(m)
}
func (m *AddCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddCertificateRequest proto.InternalMessageInfo

func (m *AddCertificateRequest) GetDer() []byte {
	if m != nil {
		return m.Der
	}
	return nil
}

func (m *AddCertificateRequest) GetRegID() int64 {
	if m != nil && m.RegID != nil {
		return *m.RegID
	}
	return 0
}

func (m *AddCertificateRequest) GetOcsp() []byte {
	if m != nil {
		return m.Ocsp
	}
	return nil
}

func (m *AddCertificateRequest) GetIssued() int64 {
	if m != nil && m.Issued != nil {
		return *m.Issued
	}
	return 0
}

type AddCertificateResponse struct {
	Digest               *string  `protobuf:"bytes,1,opt,name=digest" json:"digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddCertificateResponse) Reset()         { *m = AddCertificateResponse{} }
func (m *AddCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*AddCertificateResponse) ProtoMessage()    {}
func (*AddCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{20}
}

func (m *AddCertificateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddCertificateResponse.Unmarshal(m, b)
}
func (m *AddCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddCertificateResponse.Marshal(b, m, deterministic)
}
func (m *AddCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCertificateResponse.Merge(m, src)
}
func (m *AddCertificateResponse) XXX_Size() int {
	return xxx_messageInfo_AddCertificateResponse.Size(m)
}
func (m *AddCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddCertificateResponse proto.InternalMessageInfo

func (m *AddCertificateResponse) GetDigest() string {
	if m != nil && m.Digest != nil {
		return *m.Digest
	}
	return ""
}

type OrderRequest struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UseV2Authorizations  *bool    `protobuf:"varint,2,opt,name=useV2Authorizations" json:"useV2Authorizations,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderRequest) Reset()         { *m = OrderRequest{} }
func (m *OrderRequest) String() string { return proto.CompactTextString(m) }
func (*OrderRequest) ProtoMessage()    {}
func (*OrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{21}
}

func (m *OrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderRequest.Unmarshal(m, b)
}
func (m *OrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderRequest.Marshal(b, m, deterministic)
}
func (m *OrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderRequest.Merge(m, src)
}
func (m *OrderRequest) XXX_Size() int {
	return xxx_messageInfo_OrderRequest.Size(m)
}
func (m *OrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderRequest proto.InternalMessageInfo

func (m *OrderRequest) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *OrderRequest) GetUseV2Authorizations() bool {
	if m != nil && m.UseV2Authorizations != nil {
		return *m.UseV2Authorizations
	}
	return false
}

type GetValidOrderAuthorizationsRequest struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AcctID               *int64   `protobuf:"varint,2,opt,name=acctID" json:"acctID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetValidOrderAuthorizationsRequest) Reset()         { *m = GetValidOrderAuthorizationsRequest{} }
func (m *GetValidOrderAuthorizationsRequest) String() string { return proto.CompactTextString(m) }
func (*GetValidOrderAuthorizationsRequest) ProtoMessage()    {}
func (*GetValidOrderAuthorizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{22}
}

func (m *GetValidOrderAuthorizationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetValidOrderAuthorizationsRequest.Unmarshal(m, b)
}
func (m *GetValidOrderAuthorizationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetValidOrderAuthorizationsRequest.Marshal(b, m, deterministic)
}
func (m *GetValidOrderAuthorizationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetValidOrderAuthorizationsRequest.Merge(m, src)
}
func (m *GetValidOrderAuthorizationsRequest) XXX_Size() int {
	return xxx_messageInfo_GetValidOrderAuthorizationsRequest.Size(m)
}
func (m *GetValidOrderAuthorizationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetValidOrderAuthorizationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetValidOrderAuthorizationsRequest proto.InternalMessageInfo

func (m *GetValidOrderAuthorizationsRequest) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GetValidOrderAuthorizationsRequest) GetAcctID() int64 {
	if m != nil && m.AcctID != nil {
		return *m.AcctID
	}
	return 0
}

type GetOrderForNamesRequest struct {
	AcctID               *int64   `protobuf:"varint,1,opt,name=acctID" json:"acctID,omitempty"`
	Names                []string `protobuf:"bytes,2,rep,name=names" json:"names,omitempty"`
	UseV2Authorizations  *bool    `protobuf:"varint,3,opt,name=useV2Authorizations" json:"useV2Authorizations,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOrderForNamesRequest) Reset()         { *m = GetOrderForNamesRequest{} }
func (m *GetOrderForNamesRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrderForNamesRequest) ProtoMessage()    {}
func (*GetOrderForNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{23}
}

func (m *GetOrderForNamesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOrderForNamesRequest.Unmarshal(m, b)
}
func (m *GetOrderForNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOrderForNamesRequest.Marshal(b, m, deterministic)
}
func (m *GetOrderForNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrderForNamesRequest.Merge(m, src)
}
func (m *GetOrderForNamesRequest) XXX_Size() int {
	return xxx_messageInfo_GetOrderForNamesRequest.Size(m)
}
func (m *GetOrderForNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrderForNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrderForNamesRequest proto.InternalMessageInfo

func (m *GetOrderForNamesRequest) GetAcctID() int64 {
	if m != nil && m.AcctID != nil {
		return *m.AcctID
	}
	return 0
}

func (m *GetOrderForNamesRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *GetOrderForNamesRequest) GetUseV2Authorizations() bool {
	if m != nil && m.UseV2Authorizations != nil {
		return *m.UseV2Authorizations
	}
	return false
}

type GetAuthorizationsRequest struct {
	RegistrationID       *int64   `protobuf:"varint,1,opt,name=registrationID" json:"registrationID,omitempty"`
	Domains              []string `protobuf:"bytes,2,rep,name=domains" json:"domains,omitempty"`
	Now                  *int64   `protobuf:"varint,3,opt,name=now" json:"now,omitempty"`
	RequireV2Authzs      *bool    `protobuf:"varint,4,opt,name=requireV2Authzs" json:"requireV2Authzs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAuthorizationsRequest) Reset()         { *m = GetAuthorizationsRequest{} }
func (m *GetAuthorizationsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAuthorizationsRequest) ProtoMessage()    {}
func (*GetAuthorizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{24}
}

func (m *GetAuthorizationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAuthorizationsRequest.Unmarshal(m, b)
}
func (m *GetAuthorizationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAuthorizationsRequest.Marshal(b, m, deterministic)
}
func (m *GetAuthorizationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuthorizationsRequest.Merge(m, src)
}
func (m *GetAuthorizationsRequest) XXX_Size() int {
	return xxx_messageInfo_GetAuthorizationsRequest.Size(m)
}
func (m *GetAuthorizationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuthorizationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuthorizationsRequest proto.InternalMessageInfo

func (m *GetAuthorizationsRequest) GetRegistrationID() int64 {
	if m != nil && m.RegistrationID != nil {
		return *m.RegistrationID
	}
	return 0
}

func (m *GetAuthorizationsRequest) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetAuthorizationsRequest) GetNow() int64 {
	if m != nil && m.Now != nil {
		return *m.Now
	}
	return 0
}

func (m *GetAuthorizationsRequest) GetRequireV2Authzs() bool {
	if m != nil && m.RequireV2Authzs != nil {
		return *m.RequireV2Authzs
	}
	return false
}

type Authorizations struct {
	Authz                []*Authorizations_MapElement `protobuf:"bytes,1,rep,name=authz" json:"authz,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *Authorizations) Reset()         { *m = Authorizations{} }
func (m *Authorizations) String() string { return proto.CompactTextString(m) }
func (*Authorizations) ProtoMessage()    {}
func (*Authorizations) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{25}
}

func (m *Authorizations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Authorizations.Unmarshal(m, b)
}
func (m *Authorizations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Authorizations.Marshal(b, m, deterministic)
}
func (m *Authorizations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Authorizations.Merge(m, src)
}
func (m *Authorizations) XXX_Size() int {
	return xxx_messageInfo_Authorizations.Size(m)
}
func (m *Authorizations) XXX_DiscardUnknown() {
	xxx_messageInfo_Authorizations.DiscardUnknown(m)
}

var xxx_messageInfo_Authorizations proto.InternalMessageInfo

func (m *Authorizations) GetAuthz() []*Authorizations_MapElement {
	if m != nil {
		return m.Authz
	}
	return nil
}

type Authorizations_MapElement struct {
	Domain               *string               `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Authz                *proto1.Authorization `protobuf:"bytes,2,opt,name=authz" json:"authz,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Authorizations_MapElement) Reset()         { *m = Authorizations_MapElement{} }
func (m *Authorizations_MapElement) String() string { return proto.CompactTextString(m) }
func (*Authorizations_MapElement) ProtoMessage()    {}
func (*Authorizations_MapElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{25, 0}
}

func (m *Authorizations_MapElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Authorizations_MapElement.Unmarshal(m, b)
}
func (m *Authorizations_MapElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Authorizations_MapElement.Marshal(b, m, deterministic)
}
func (m *Authorizations_MapElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Authorizations_MapElement.Merge(m, src)
}
func (m *Authorizations_MapElement) XXX_Size() int {
	return xxx_messageInfo_Authorizations_MapElement.Size(m)
}
func (m *Authorizations_MapElement) XXX_DiscardUnknown() {
	xxx_messageInfo_Authorizations_MapElement.DiscardUnknown(m)
}

var xxx_messageInfo_Authorizations_MapElement proto.InternalMessageInfo

func (m *Authorizations_MapElement) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

func (m *Authorizations_MapElement) GetAuthz() *proto1.Authorization {
	if m != nil {
		return m.Authz
	}
	return nil
}

type AddPendingAuthorizationsRequest struct {
	Authz                []*proto1.Authorization `protobuf:"bytes,1,rep,name=authz" json:"authz,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AddPendingAuthorizationsRequest) Reset()         { *m = AddPendingAuthorizationsRequest{} }
func (m *AddPendingAuthorizationsRequest) String() string { return proto.CompactTextString(m) }
func (*AddPendingAuthorizationsRequest) ProtoMessage()    {}
func (*AddPendingAuthorizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{26}
}

func (m *AddPendingAuthorizationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPendingAuthorizationsRequest.Unmarshal(m, b)
}
func (m *AddPendingAuthorizationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPendingAuthorizationsRequest.Marshal(b, m, deterministic)
}
func (m *AddPendingAuthorizationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPendingAuthorizationsRequest.Merge(m, src)
}
func (m *AddPendingAuthorizationsRequest) XXX_Size() int {
	return xxx_messageInfo_AddPendingAuthorizationsRequest.Size(m)
}
func (m *AddPendingAuthorizationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPendingAuthorizationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPendingAuthorizationsRequest proto.InternalMessageInfo

func (m *AddPendingAuthorizationsRequest) GetAuthz() []*proto1.Authorization {
	if m != nil {
		return m.Authz
	}
	return nil
}

type AuthorizationIDs struct {
	Ids                  []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthorizationIDs) Reset()         { *m = AuthorizationIDs{} }
func (m *AuthorizationIDs) String() string { return proto.CompactTextString(m) }
func (*AuthorizationIDs) ProtoMessage()    {}
func (*AuthorizationIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{27}
}

func (m *AuthorizationIDs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthorizationIDs.Unmarshal(m, b)
}
func (m *AuthorizationIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthorizationIDs.Marshal(b, m, deterministic)
}
func (m *AuthorizationIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizationIDs.Merge(m, src)
}
func (m *AuthorizationIDs) XXX_Size() int {
	return xxx_messageInfo_AuthorizationIDs.Size(m)
}
func (m *AuthorizationIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizationIDs.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizationIDs proto.InternalMessageInfo

func (m *AuthorizationIDs) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type AuthorizationID2 struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthorizationID2) Reset()         { *m = AuthorizationID2{} }
func (m *AuthorizationID2) String() string { return proto.CompactTextString(m) }
func (*AuthorizationID2) ProtoMessage()    {}
func (*AuthorizationID2) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{28}
}

func (m *AuthorizationID2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthorizationID2.Unmarshal(m, b)
}
func (m *AuthorizationID2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthorizationID2.Marshal(b, m, deterministic)
}
func (m *AuthorizationID2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizationID2.Merge(m, src)
}
func (m *AuthorizationID2) XXX_Size() int {
	return xxx_messageInfo_AuthorizationID2.Size(m)
}
func (m *AuthorizationID2) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizationID2.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizationID2 proto.InternalMessageInfo

func (m *AuthorizationID2) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type Authorization2IDs struct {
	Ids                  []int64  `protobuf:"varint,1,rep,name=ids" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Authorization2IDs) Reset()         { *m = Authorization2IDs{} }
func (m *Authorization2IDs) String() string { return proto.CompactTextString(m) }
func (*Authorization2IDs) ProtoMessage()    {}
func (*Authorization2IDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{29}
}

func (m *Authorization2IDs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Authorization2IDs.Unmarshal(m, b)
}
func (m *Authorization2IDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Authorization2IDs.Marshal(b, m, deterministic)
}
func (m *Authorization2IDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Authorization2IDs.Merge(m, src)
}
func (m *Authorization2IDs) XXX_Size() int {
	return xxx_messageInfo_Authorization2IDs.Size(m)
}
func (m *Authorization2IDs) XXX_DiscardUnknown() {
	xxx_messageInfo_Authorization2IDs.DiscardUnknown(m)
}

var xxx_messageInfo_Authorization2IDs proto.InternalMessageInfo

func (m *Authorization2IDs) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type RevokeCertificateRequest struct {
	Serial               *string  `protobuf:"bytes,1,opt,name=serial" json:"serial,omitempty"`
	Reason               *int64   `protobuf:"varint,2,opt,name=reason" json:"reason,omitempty"`
	Date                 *int64   `protobuf:"varint,3,opt,name=date" json:"date,omitempty"`
	Response             []byte   `protobuf:"bytes,4,opt,name=response" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevokeCertificateRequest) Reset()         { *m = RevokeCertificateRequest{} }
func (m *RevokeCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*RevokeCertificateRequest) ProtoMessage()    {}
func (*RevokeCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{30}
}

func (m *RevokeCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevokeCertificateRequest.Unmarshal(m, b)
}
func (m *RevokeCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevokeCertificateRequest.Marshal(b, m, deterministic)
}
func (m *RevokeCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokeCertificateRequest.Merge(m, src)
}
func (m *RevokeCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_RevokeCertificateRequest.Size(m)
}
func (m *RevokeCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokeCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RevokeCertificateRequest proto.InternalMessageInfo

func (m *RevokeCertificateRequest) GetSerial() string {
	if m != nil && m.Serial != nil {
		return *m.Serial
	}
	return ""
}

func (m *RevokeCertificateRequest) GetReason() int64 {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return 0
}

func (m *RevokeCertificateRequest) GetDate() int64 {
	if m != nil && m.Date != nil {
		return *m.Date
	}
	return 0
}

func (m *RevokeCertificateRequest) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

type FinalizeAuthorizationRequest struct {
	Id                   *int64                     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Status               *string                    `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Expires              *int64                     `protobuf:"varint,3,opt,name=expires" json:"expires,omitempty"`
	Attempted            *string                    `protobuf:"bytes,4,opt,name=attempted" json:"attempted,omitempty"`
	ValidationRecords    []*proto1.ValidationRecord `protobuf:"bytes,5,rep,name=validationRecords" json:"validationRecords,omitempty"`
	ValidationError      *proto1.ProblemDetails     `protobuf:"bytes,6,opt,name=validationError" json:"validationError,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *FinalizeAuthorizationRequest) Reset()         { *m = FinalizeAuthorizationRequest{} }
func (m *FinalizeAuthorizationRequest) String() string { return proto.CompactTextString(m) }
func (*FinalizeAuthorizationRequest) ProtoMessage()    {}
func (*FinalizeAuthorizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099fb35e782a48a6, []int{31}
}

func (m *FinalizeAuthorizationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FinalizeAuthorizationRequest.Unmarshal(m, b)
}
func (m *FinalizeAuthorizationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FinalizeAuthorizationRequest.Marshal(b, m, deterministic)
}
func (m *FinalizeAuthorizationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizeAuthorizationRequest.Merge(m, src)
}
func (m *FinalizeAuthorizationRequest) XXX_Size() int {
	return xxx_messageInfo_FinalizeAuthorizationRequest.Size(m)
}
func (m *FinalizeAuthorizationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizeAuthorizationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizeAuthorizationRequest proto.InternalMessageInfo

func (m *FinalizeAuthorizationRequest) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FinalizeAuthorizationRequest) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *FinalizeAuthorizationRequest) GetExpires() int64 {
	if m != nil && m.Expires != nil {
		return *m.Expires
	}
	return 0
}

func (m *FinalizeAuthorizationRequest) GetAttempted() string {
	if m != nil && m.Attempted != nil {
		return *m.Attempted
	}
	return ""
}

func (m *FinalizeAuthorizationRequest) GetValidationRecords() []*proto1.ValidationRecord {
	if m != nil {
		return m.ValidationRecords
	}
	return nil
}

func (m *FinalizeAuthorizationRequest) GetValidationError() *proto1.ProblemDetails {
	if m != nil {
		return m.ValidationError
	}
	return nil
}

func init() {
	proto.RegisterType((*RegistrationID)(nil), "sa.RegistrationID")
	proto.RegisterType((*JSONWebKey)(nil), "sa.JSONWebKey")
	proto.RegisterType((*AuthorizationID)(nil), "sa.AuthorizationID")
	proto.RegisterType((*GetPendingAuthorizationRequest)(nil), "sa.GetPendingAuthorizationRequest")
	proto.RegisterType((*GetValidAuthorizationsRequest)(nil), "sa.GetValidAuthorizationsRequest")
	proto.RegisterType((*ValidAuthorizations)(nil), "sa.ValidAuthorizations")
	proto.RegisterType((*ValidAuthorizations_MapElement)(nil), "sa.ValidAuthorizations.MapElement")
	proto.RegisterType((*CertificateStatus)(nil), "sa.CertificateStatus")
	proto.RegisterType((*Serial)(nil), "sa.Serial")
	proto.RegisterType((*Range)(nil), "sa.Range")
	proto.RegisterType((*Count)(nil), "sa.Count")
	proto.RegisterType((*CountCertificatesByNamesRequest)(nil), "sa.CountCertificatesByNamesRequest")
	proto.RegisterType((*CountByNames)(nil), "sa.CountByNames")
	proto.RegisterType((*CountByNames_MapElement)(nil), "sa.CountByNames.MapElement")
	proto.RegisterType((*CountRegistrationsByIPRequest)(nil), "sa.CountRegistrationsByIPRequest")
	proto.RegisterType((*CountInvalidAuthorizationsRequest)(nil), "sa.CountInvalidAuthorizationsRequest")
	proto.RegisterType((*CountOrdersRequest)(nil), "sa.CountOrdersRequest")
	proto.RegisterType((*CountFQDNSetsRequest)(nil), "sa.CountFQDNSetsRequest")
	proto.RegisterType((*FQDNSetExistsRequest)(nil), "sa.FQDNSetExistsRequest")
	proto.RegisterType((*PreviousCertificateExistsRequest)(nil), "sa.PreviousCertificateExistsRequest")
	proto.RegisterType((*Exists)(nil), "sa.Exists")
	proto.RegisterType((*AddCertificateRequest)(nil), "sa.AddCertificateRequest")
	proto.RegisterType((*AddCertificateResponse)(nil), "sa.AddCertificateResponse")
	proto.RegisterType((*OrderRequest)(nil), "sa.OrderRequest")
	proto.RegisterType((*GetValidOrderAuthorizationsRequest)(nil), "sa.GetValidOrderAuthorizationsRequest")
	proto.RegisterType((*GetOrderForNamesRequest)(nil), "sa.GetOrderForNamesRequest")
	proto.RegisterType((*GetAuthorizationsRequest)(nil), "sa.GetAuthorizationsRequest")
	proto.RegisterType((*Authorizations)(nil), "sa.Authorizations")
	proto.RegisterType((*Authorizations_MapElement)(nil), "sa.Authorizations.MapElement")
	proto.RegisterType((*AddPendingAuthorizationsRequest)(nil), "sa.AddPendingAuthorizationsRequest")
	proto.RegisterType((*AuthorizationIDs)(nil), "sa.AuthorizationIDs")
	proto.RegisterType((*AuthorizationID2)(nil), "sa.AuthorizationID2")
	proto.RegisterType((*Authorization2IDs)(nil), "sa.Authorization2IDs")
	proto.RegisterType((*RevokeCertificateRequest)(nil), "sa.RevokeCertificateRequest")
	proto.RegisterType((*FinalizeAuthorizationRequest)(nil), "sa.FinalizeAuthorizationRequest")
}

func init() { proto.RegisterFile("sa/proto/sa.proto", fileDescriptor_099fb35e782a48a6) }

var fileDescriptor_099fb35e782a48a6 = []byte{
	// 1765 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x5b, 0x73, 0xdb, 0xc6,
	0x15, 0xe6, 0xc5, 0x94, 0xc9, 0x23, 0x59, 0x97, 0x95, 0x44, 0x21, 0x90, 0x64, 0xd3, 0x5b, 0xc7,
	0xa3, 0x4c, 0x67, 0x14, 0x15, 0xed, 0x24, 0x9d, 0x51, 0xe3, 0x54, 0x0a, 0x65, 0x59, 0xa9, 0x43,
	0x31, 0x60, 0xac, 0x74, 0xda, 0xbe, 0x20, 0xc4, 0x86, 0x46, 0x4d, 0x01, 0x0c, 0x76, 0x29, 0x86,
	0x7a, 0xee, 0x4c, 0x3b, 0xd3, 0xf7, 0x4e, 0x1f, 0xfb, 0x3b, 0xfa, 0x27, 0xfa, 0x97, 0x3a, 0x7b,
	0xb0, 0x00, 0x01, 0x70, 0x41, 0x39, 0x76, 0xa7, 0x6f, 0x38, 0x67, 0xcf, 0x6d, 0x77, 0xcf, 0xe5,
	0x5b, 0xc0, 0x06, 0x77, 0x3e, 0x1e, 0x85, 0x81, 0x08, 0x3e, 0xe6, 0xce, 0x21, 0x7e, 0x90, 0x0a,
	0x77, 0xcc, 0xed, 0x7e, 0x10, 0x32, 0xb5, 0x20, 0x3f, 0xa3, 0x25, 0xda, 0x82, 0x55, 0x9b, 0x0d,
	0x3c, 0x2e, 0x42, 0x47, 0x78, 0x81, 0x7f, 0xd1, 0x26, 0xab, 0x50, 0xf1, 0x5c, 0xa3, 0xdc, 0x2a,
	0x1f, 0x54, 0xed, 0x8a, 0xe7, 0xd2, 0x87, 0x00, 0x5f, 0xf6, 0x2e, 0x3b, 0xdf, 0xb2, 0xef, 0x7e,
	0xc7, 0xa6, 0x64, 0x1d, 0xaa, 0x7f, 0x9e, 0xbc, 0xc1, 0xe5, 0x15, 0x5b, 0x7e, 0xd2, 0xc7, 0xb0,
	0x76, 0x32, 0x16, 0xaf, 0x83, 0xd0, 0xbb, 0x9d, 0x37, 0xd1, 0x40, 0x13, 0xff, 0x2e, 0xc3, 0xc3,
	0x73, 0x26, 0xba, 0xcc, 0x77, 0x3d, 0x7f, 0x90, 0x91, 0xb6, 0xd9, 0x0f, 0x63, 0xc6, 0x05, 0x79,
	0x0a, 0xab, 0x61, 0x26, 0x0e, 0x15, 0x41, 0x8e, 0x2b, 0xe5, 0x3c, 0x97, 0xf9, 0xc2, 0xfb, 0xde,
	0x63, 0xe1, 0x37, 0xd3, 0x11, 0x33, 0x2a, 0xe8, 0x26, 0xc7, 0x25, 0x07, 0xb0, 0x36, 0xe3, 0x5c,
	0x39, 0xc3, 0x31, 0x33, 0xaa, 0x28, 0x98, 0x67, 0x93, 0x87, 0x00, 0x37, 0xce, 0xd0, 0x73, 0x5f,
	0xf9, 0xc2, 0x1b, 0x1a, 0xf7, 0xd0, 0x6b, 0x8a, 0x43, 0x39, 0xec, 0x9f, 0x33, 0x71, 0x25, 0x19,
	0x99, 0xc8, 0xf9, 0x4f, 0x0d, 0xdd, 0x80, 0xfb, 0x6e, 0x70, 0xed, 0x78, 0x3e, 0x37, 0x2a, 0xad,
	0xea, 0x41, 0xc3, 0x8e, 0x49, 0x79, 0xa8, 0x7e, 0x30, 0xc1, 0x00, 0xab, 0xb6, 0xfc, 0xa4, 0xff,
	0x2a, 0xc3, 0xa6, 0xc6, 0x25, 0xf9, 0x35, 0xd4, 0x30, 0x34, 0xa3, 0xdc, 0xaa, 0x1e, 0x2c, 0x5b,
	0xf4, 0x90, 0x3b, 0x87, 0x1a, 0xb9, 0xc3, 0xaf, 0x9c, 0xd1, 0xd9, 0x90, 0x5d, 0x33, 0x5f, 0xd8,
	0x91, 0x82, 0x79, 0x09, 0x30, 0x63, 0x92, 0x26, 0x2c, 0x45, 0xce, 0xd5, 0x2d, 0x29, 0x8a, 0x7c,
	0x04, 0x35, 0x67, 0x2c, 0x5e, 0xdf, 0xe2, 0xa9, 0x2e, 0x5b, 0x9b, 0x87, 0x98, 0x2a, 0xd9, 0x1b,
	0x8b, 0x24, 0xe8, 0x7f, 0x2a, 0xb0, 0xf1, 0x05, 0x0b, 0xe5, 0x51, 0xf6, 0x1d, 0xc1, 0x7a, 0xc2,
	0x11, 0x63, 0x2e, 0x0d, 0x73, 0x16, 0x7a, 0xce, 0x30, 0x36, 0x1c, 0x51, 0xc8, 0x47, 0x09, 0x75,
	0x0d, 0x8a, 0x92, 0xf7, 0x14, 0xf4, 0xf9, 0xe8, 0xa5, 0xc3, 0xc5, 0xab, 0x91, 0xeb, 0x08, 0xe6,
	0xaa, 0x2b, 0xc8, 0xb3, 0x49, 0x0b, 0x96, 0x43, 0x76, 0x13, 0xbc, 0x61, 0x6e, 0xdb, 0x11, 0xcc,
	0xa8, 0xa1, 0x54, 0x9a, 0x45, 0x9e, 0xc0, 0x03, 0x45, 0xda, 0xcc, 0xe1, 0x81, 0x6f, 0x2c, 0xa1,
	0x4c, 0x96, 0x49, 0x7e, 0x05, 0xdb, 0x43, 0x87, 0x8b, 0xb3, 0x1f, 0x47, 0x5e, 0x74, 0x35, 0x1d,
	0x67, 0xd0, 0x63, 0xbe, 0x30, 0xee, 0xa3, 0xb4, 0x7e, 0x91, 0x50, 0x58, 0x91, 0x01, 0xd9, 0x8c,
	0x8f, 0x02, 0x9f, 0x33, 0xa3, 0x8e, 0x05, 0x90, 0xe1, 0x11, 0x13, 0xea, 0x7e, 0x20, 0x4e, 0xbe,
	0x17, 0x2c, 0x34, 0x1a, 0x68, 0x2c, 0xa1, 0xc9, 0x1e, 0x34, 0x3c, 0x8e, 0x66, 0x99, 0x6b, 0x40,
	0xab, 0x7c, 0x50, 0xb7, 0x67, 0x8c, 0x2f, 0xef, 0xd5, 0x2b, 0xeb, 0x55, 0xda, 0x82, 0xa5, 0xde,
	0xec, 0xb4, 0x34, 0xa7, 0x48, 0x8f, 0xa1, 0x66, 0x3b, 0xfe, 0x00, 0x5d, 0x31, 0x27, 0x1c, 0x7a,
	0x8c, 0x0b, 0x95, 0x6d, 0x09, 0x2d, 0x95, 0x87, 0x8e, 0x90, 0x2b, 0x15, 0x5c, 0x51, 0x14, 0xdd,
	0x87, 0xda, 0x17, 0xc1, 0xd8, 0x17, 0x64, 0x0b, 0x6a, 0x7d, 0xf9, 0xa1, 0x34, 0x23, 0x82, 0xfe,
	0x1e, 0x1e, 0xe1, 0x72, 0xea, 0x4e, 0xf9, 0xe9, 0xb4, 0xe3, 0x5c, 0xb3, 0x24, 0xd3, 0x1f, 0x41,
	0x2d, 0x94, 0xee, 0x51, 0x71, 0xd9, 0x6a, 0xc8, 0xec, 0xc3, 0x78, 0xec, 0x88, 0x2f, 0x2d, 0xfb,
	0x52, 0x41, 0x25, 0x78, 0x44, 0xd0, 0xbf, 0x96, 0x61, 0x05, 0x4d, 0x2b, 0x73, 0xe4, 0x73, 0x58,
	0xe9, 0xa7, 0x68, 0x95, 0xcc, 0xbb, 0xd2, 0x5c, 0x5a, 0x2e, 0x9d, 0xc5, 0x19, 0x05, 0xf3, 0x93,
	0x4c, 0x32, 0x13, 0xb8, 0x27, 0x1d, 0xa9, 0xb3, 0xc2, 0xef, 0xd9, 0x1e, 0x2b, 0xe9, 0x3d, 0x76,
	0x61, 0x1f, 0x1d, 0xa4, 0x5b, 0x1e, 0x3f, 0x9d, 0x5e, 0x74, 0xe3, 0x1d, 0xca, 0xce, 0x35, 0x52,
	0xdd, 0xad, 0xe2, 0x8d, 0x66, 0x3b, 0xae, 0xe8, 0x77, 0x4c, 0xff, 0x56, 0x86, 0xc7, 0x68, 0xf2,
	0xc2, 0xbf, 0x79, 0xff, 0x16, 0x61, 0x42, 0xfd, 0x75, 0xc0, 0x05, 0xee, 0x26, 0xea, 0x6b, 0x09,
	0x3d, 0x0b, 0xa5, 0x5a, 0x10, 0x4a, 0x0f, 0x08, 0x46, 0x72, 0x19, 0xba, 0x2c, 0x4c, 0x5c, 0xef,
	0x41, 0xc3, 0xe9, 0xe3, 0xee, 0x13, 0xaf, 0x33, 0xc6, 0xdd, 0xfb, 0x7b, 0x01, 0x5b, 0x68, 0xf4,
	0xf9, 0xd7, 0xed, 0x4e, 0x8f, 0x89, 0xc4, 0x6c, 0x13, 0x96, 0x26, 0x9e, 0xef, 0x06, 0x13, 0x65,
	0x53, 0x51, 0xc5, 0x4d, 0x8e, 0x1e, 0xc1, 0x96, 0x32, 0x72, 0xf6, 0xa3, 0xc7, 0x67, 0x96, 0x52,
	0x1a, 0xe5, 0xac, 0x46, 0x17, 0x5a, 0xdd, 0x90, 0xdd, 0x78, 0xc1, 0x98, 0xa7, 0x92, 0x32, 0xab,
	0x5d, 0xd4, 0xc8, 0xb6, 0xa0, 0x16, 0xb2, 0xc1, 0x45, 0x3b, 0xbe, 0x7f, 0x24, 0x64, 0x85, 0x45,
	0xea, 0x52, 0x8f, 0xe1, 0x17, 0xea, 0xd5, 0x6d, 0x45, 0xd1, 0x37, 0xb0, 0x7d, 0xe2, 0xba, 0x29,
	0x77, 0xb1, 0xa3, 0x75, 0xa8, 0xba, 0x2c, 0x8c, 0x07, 0x9f, 0xcb, 0x42, 0xbd, 0x0b, 0x99, 0x8c,
	0xb2, 0x29, 0xe0, 0x2d, 0xad, 0xd8, 0xf8, 0x2d, 0x9d, 0x79, 0x9c, 0x8f, 0x93, 0xde, 0xa6, 0x28,
	0x7a, 0x04, 0xcd, 0xbc, 0x33, 0xd5, 0x4a, 0xe4, 0xb6, 0xbc, 0x41, 0x5c, 0xdd, 0x72, 0x5b, 0x48,
	0xd1, 0x2e, 0xac, 0xe0, 0xf5, 0xa6, 0xf3, 0x35, 0x35, 0xac, 0xc9, 0x11, 0x6c, 0x8e, 0x39, 0xbb,
	0xb2, 0xb2, 0x69, 0x88, 0x11, 0xd6, 0x6d, 0xdd, 0x12, 0x7d, 0x09, 0x34, 0x1e, 0x6f, 0x68, 0x59,
	0x9f, 0xc0, 0x79, 0x3f, 0x4d, 0x58, 0x72, 0xfa, 0x7d, 0x91, 0x6c, 0x5e, 0x51, 0x74, 0x0a, 0x3b,
	0xe7, 0x2c, 0xca, 0xc0, 0xe7, 0x41, 0x98, 0x69, 0x1e, 0x33, 0x95, 0x72, 0x5a, 0x45, 0xdf, 0x33,
	0x8a, 0x36, 0x52, 0x2d, 0xde, 0xc8, 0x3f, 0xcb, 0x60, 0x9c, 0x33, 0xf1, 0x7f, 0x9b, 0xd1, 0x72,
	0x74, 0x85, 0xec, 0x87, 0xb1, 0x17, 0xaa, 0x58, 0x6e, 0x39, 0x5e, 0x6f, 0xdd, 0xce, 0xb3, 0xe9,
	0x3f, 0xca, 0xb0, 0x9a, 0x1b, 0xe4, 0xbf, 0x8c, 0x07, 0x6d, 0xd4, 0xfb, 0xf6, 0x65, 0xe1, 0x2d,
	0x98, 0xe1, 0x28, 0xfb, 0xbf, 0x9f, 0xe1, 0x2f, 0xe1, 0xd1, 0x89, 0xeb, 0xea, 0x70, 0x59, 0x72,
	0x72, 0x1f, 0x65, 0x03, 0x5d, 0x64, 0xed, 0x09, 0xac, 0xe7, 0x90, 0x20, 0x1e, 0x9b, 0xe7, 0xc6,
	0x95, 0x2d, 0x3f, 0x29, 0x9d, 0x93, 0xb2, 0xe6, 0x30, 0xe7, 0x87, 0xb0, 0x91, 0x91, 0xb1, 0x72,
	0xa6, 0xaa, 0x91, 0xa9, 0x5b, 0x30, 0x6c, 0x9c, 0xed, 0x9a, 0x7a, 0x5d, 0x00, 0x44, 0xc2, 0x08,
	0x1d, 0xa8, 0xcc, 0x8d, 0x28, 0x59, 0xb7, 0x12, 0x67, 0xa8, 0x0b, 0xc6, 0x6f, 0xd9, 0x8e, 0xc3,
	0x78, 0xe0, 0xdf, 0xc3, 0x7a, 0x4e, 0x68, 0xfa, 0x97, 0x0a, 0xec, 0x3d, 0xf7, 0x7c, 0x67, 0xe8,
	0xdd, 0x32, 0x2d, 0xa2, 0xd5, 0x94, 0x8c, 0x42, 0x40, 0x95, 0x0c, 0x02, 0x32, 0xe0, 0x3e, 0x43,
	0x18, 0xc0, 0x95, 0xef, 0x98, 0xc4, 0xd6, 0x2d, 0x04, 0xbb, 0x1e, 0xc5, 0xa8, 0xa8, 0x61, 0xcf,
	0x18, 0xa4, 0x0d, 0x1b, 0x38, 0x71, 0x94, 0xd3, 0x7e, 0x10, 0xba, 0xdc, 0xa8, 0xe1, 0x25, 0x35,
	0xa3, 0x4b, 0xba, 0xca, 0x2d, 0xdb, 0xf3, 0x0a, 0xe4, 0x19, 0xac, 0xcd, 0x98, 0x67, 0x61, 0x18,
	0x84, 0x88, 0x9a, 0x96, 0xad, 0xad, 0xc8, 0x46, 0x37, 0x0c, 0xbe, 0x1b, 0xb2, 0xeb, 0x36, 0x13,
	0x8e, 0x37, 0xe4, 0x76, 0x5e, 0xd8, 0xfa, 0xfb, 0x0e, 0xac, 0xf7, 0x44, 0x10, 0x3a, 0x83, 0xf8,
	0x14, 0xc4, 0x94, 0x1c, 0xc3, 0xda, 0x39, 0xcb, 0x0c, 0x59, 0x42, 0x70, 0xb2, 0x64, 0x8a, 0xcd,
	0x24, 0x91, 0x8b, 0x34, 0x97, 0x96, 0xc8, 0x6f, 0x60, 0x2b, 0xa7, 0x7c, 0x3a, 0x95, 0x2f, 0x8f,
	0x55, 0x69, 0x61, 0xf6, 0x12, 0x29, 0xd0, 0x7e, 0x06, 0xeb, 0xf9, 0x26, 0x40, 0x36, 0xe7, 0x8a,
	0xeb, 0xa2, 0x6d, 0xea, 0x12, 0x99, 0x96, 0xc8, 0x37, 0xd8, 0xc0, 0x74, 0x15, 0x41, 0x10, 0x6c,
	0x2f, 0x7e, 0xc6, 0x14, 0x59, 0xbd, 0x82, 0xa6, 0xfe, 0x0d, 0x41, 0x1e, 0x2b, 0xa3, 0xc5, 0xef,
	0x0b, 0x73, 0xa7, 0x00, 0xe4, 0xd3, 0x12, 0xf9, 0x05, 0xac, 0x9e, 0xb3, 0x34, 0x62, 0x23, 0x20,
	0x85, 0x23, 0x14, 0x69, 0x6e, 0x44, 0xc1, 0xa4, 0x96, 0x69, 0x89, 0x1c, 0xe3, 0xf1, 0xce, 0x03,
	0xf7, 0xb4, 0xe2, 0x36, 0x22, 0xb1, 0xbc, 0x08, 0x2d, 0x91, 0x1e, 0x18, 0x45, 0x18, 0x91, 0xfc,
	0x2c, 0x81, 0x6f, 0xc5, 0x08, 0xd2, 0x5c, 0xcf, 0x63, 0x3c, 0x5a, 0x22, 0x2f, 0xa0, 0xa9, 0x07,
	0x65, 0xd1, 0xe1, 0x2c, 0x04, 0x6c, 0x66, 0x23, 0x11, 0xa1, 0x25, 0xf2, 0x15, 0xec, 0x16, 0x48,
	0x23, 0x3a, 0xfd, 0xa9, 0xe6, 0x3e, 0x03, 0x13, 0x3f, 0xb5, 0xfd, 0x51, 0x9b, 0xd1, 0x19, 0x75,
	0x0b, 0x96, 0x53, 0x78, 0x8c, 0x34, 0x93, 0xb5, 0x0c, 0x40, 0xcb, 0xea, 0x74, 0x95, 0x4b, 0x2d,
	0x9a, 0x24, 0x1f, 0x26, 0xa2, 0x8b, 0xd0, 0x66, 0xd6, 0xe2, 0x27, 0xf0, 0x20, 0x03, 0xe0, 0x88,
	0x91, 0xac, 0xe6, 0x30, 0x5d, 0x56, 0xef, 0x53, 0x78, 0x90, 0x81, 0x6b, 0x91, 0x9e, 0x0e, 0xc1,
	0x99, 0x98, 0x3a, 0x11, 0x8b, 0x96, 0xc8, 0x25, 0x7c, 0x50, 0x88, 0xda, 0xc8, 0x13, 0x29, 0x7a,
	0x17, 0xa8, 0xcb, 0x19, 0xfc, 0x2d, 0x6c, 0xe4, 0x4b, 0xda, 0x22, 0x5b, 0x9a, 0x9a, 0xb6, 0x8a,
	0xca, 0xef, 0x05, 0x90, 0x39, 0x64, 0x60, 0x91, 0x3d, 0x55, 0x7a, 0xfa, 0x43, 0x24, 0xf3, 0x13,
	0x99, 0x96, 0xc8, 0x2b, 0xc4, 0x18, 0xba, 0x84, 0xb0, 0xde, 0xa7, 0x3f, 0x3c, 0x53, 0x89, 0xab,
	0xcd, 0x34, 0xeb, 0xee, 0x54, 0xfb, 0x13, 0xec, 0x2d, 0x00, 0x71, 0x16, 0x79, 0x9a, 0xee, 0x32,
	0xc5, 0x30, 0xaf, 0x60, 0xd3, 0x5f, 0xab, 0xe8, 0xb4, 0x49, 0x67, 0xbd, 0x53, 0x56, 0xda, 0xd8,
	0x66, 0xaf, 0x74, 0xe6, 0xde, 0xa2, 0x23, 0xea, 0xc3, 0x3c, 0x86, 0xb5, 0x0e, 0x9b, 0xe4, 0xa6,
	0xce, 0xdc, 0x8c, 0x28, 0x98, 0x1b, 0x9f, 0x02, 0x89, 0x7e, 0x34, 0xdc, 0xa9, 0xbf, 0x1c, 0xf1,
	0xce, 0xae, 0x47, 0x62, 0x4a, 0x4b, 0xe4, 0x0c, 0x76, 0x3a, 0x6c, 0xa2, 0x1d, 0x18, 0xba, 0xcb,
	0x2e, 0xca, 0x80, 0x63, 0xd8, 0xd6, 0xa2, 0x09, 0xbd, 0x91, 0x5c, 0x0c, 0x17, 0xb0, 0x9a, 0x7d,
	0x47, 0x90, 0x0f, 0xf0, 0x84, 0x74, 0x0f, 0x19, 0xd3, 0xd4, 0x2d, 0x29, 0x50, 0x23, 0xe3, 0x68,
	0xb6, 0x99, 0xd3, 0x17, 0xde, 0xcd, 0xfc, 0x59, 0xcc, 0x27, 0x61, 0x2e, 0x8e, 0xcf, 0x60, 0x67,
	0xa6, 0xfc, 0x16, 0x33, 0x38, 0xa7, 0xfe, 0x14, 0xea, 0x1d, 0x36, 0xc1, 0xf4, 0x24, 0x6a, 0x09,
	0x09, 0x33, 0x4d, 0xd0, 0x12, 0x39, 0x02, 0xd2, 0x53, 0x8f, 0x8c, 0x6e, 0x18, 0xf4, 0x19, 0xe7,
	0x9e, 0x3f, 0xd0, 0x6a, 0xc4, 0x96, 0x7f, 0x0e, 0x0f, 0x62, 0x0d, 0x84, 0x2d, 0x77, 0x09, 0xc7,
	0x57, 0x51, 0x1c, 0xcb, 0x4c, 0xb8, 0x1e, 0x3f, 0x78, 0x08, 0x0e, 0xb7, 0xf4, 0xf3, 0x2c, 0x1f,
	0xf8, 0x1f, 0x61, 0x77, 0x41, 0x11, 0xbe, 0x67, 0x95, 0x46, 0xc8, 0x27, 0xf3, 0xf4, 0x22, 0xbb,
	0xca, 0xa2, 0xee, 0x41, 0x96, 0x0f, 0xee, 0x7c, 0xbe, 0xcd, 0xf2, 0x77, 0xea, 0x91, 0xdf, 0x82,
	0x51, 0xf4, 0xa8, 0x88, 0x40, 0xc2, 0x1d, 0x4f, 0x0e, 0x53, 0xd7, 0xdb, 0xd5, 0x20, 0x98, 0x83,
	0xfb, 0x51, 0x84, 0x45, 0xaf, 0x80, 0xfc, 0x6d, 0xd9, 0x40, 0x3a, 0x6c, 0x92, 0xef, 0x38, 0x6f,
	0x15, 0xd4, 0xf6, 0x5c, 0x50, 0x56, 0x14, 0xd5, 0x05, 0x34, 0xb5, 0x95, 0x6b, 0x91, 0x16, 0x4e,
	0xcc, 0x05, 0x6f, 0x84, 0x7c, 0x78, 0x9f, 0x83, 0x51, 0x50, 0x3f, 0x45, 0x03, 0x2f, 0x6b, 0xe0,
	0xf4, 0xfe, 0x1f, 0x6a, 0xf8, 0x5b, 0xff, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x53, 0xd9,
	0x8e, 0x05, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StorageAuthorityClient is the client API for StorageAuthority service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageAuthorityClient interface {
	// Getters
	GetRegistration(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*proto1.Registration, error)
	GetRegistrationByKey(ctx context.Context, in *JSONWebKey, opts ...grpc.CallOption) (*proto1.Registration, error)
	GetAuthorization(ctx context.Context, in *AuthorizationID, opts ...grpc.CallOption) (*proto1.Authorization, error)
	GetPendingAuthorization(ctx context.Context, in *GetPendingAuthorizationRequest, opts ...grpc.CallOption) (*proto1.Authorization, error)
	GetValidAuthorizations(ctx context.Context, in *GetValidAuthorizationsRequest, opts ...grpc.CallOption) (*ValidAuthorizations, error)
	GetCertificate(ctx context.Context, in *Serial, opts ...grpc.CallOption) (*proto1.Certificate, error)
	GetCertificateStatus(ctx context.Context, in *Serial, opts ...grpc.CallOption) (*CertificateStatus, error)
	CountCertificatesByNames(ctx context.Context, in *CountCertificatesByNamesRequest, opts ...grpc.CallOption) (*CountByNames, error)
	CountRegistrationsByIP(ctx context.Context, in *CountRegistrationsByIPRequest, opts ...grpc.CallOption) (*Count, error)
	CountRegistrationsByIPRange(ctx context.Context, in *CountRegistrationsByIPRequest, opts ...grpc.CallOption) (*Count, error)
	CountPendingAuthorizations(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*Count, error)
	CountOrders(ctx context.Context, in *CountOrdersRequest, opts ...grpc.CallOption) (*Count, error)
	// Return a count of authorizations with status "invalid" that belong to
	// a given registration ID and expire in the given time range.
	CountInvalidAuthorizations(ctx context.Context, in *CountInvalidAuthorizationsRequest, opts ...grpc.CallOption) (*Count, error)
	CountFQDNSets(ctx context.Context, in *CountFQDNSetsRequest, opts ...grpc.CallOption) (*Count, error)
	FQDNSetExists(ctx context.Context, in *FQDNSetExistsRequest, opts ...grpc.CallOption) (*Exists, error)
	PreviousCertificateExists(ctx context.Context, in *PreviousCertificateExistsRequest, opts ...grpc.CallOption) (*Exists, error)
	GetAuthorization2(ctx context.Context, in *AuthorizationID2, opts ...grpc.CallOption) (*proto1.Authorization, error)
	GetAuthorizations2(ctx context.Context, in *GetAuthorizationsRequest, opts ...grpc.CallOption) (*Authorizations, error)
	GetPendingAuthorization2(ctx context.Context, in *GetPendingAuthorizationRequest, opts ...grpc.CallOption) (*proto1.Authorization, error)
	CountPendingAuthorizations2(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*Count, error)
	GetValidOrderAuthorizations2(ctx context.Context, in *GetValidOrderAuthorizationsRequest, opts ...grpc.CallOption) (*Authorizations, error)
	CountInvalidAuthorizations2(ctx context.Context, in *CountInvalidAuthorizationsRequest, opts ...grpc.CallOption) (*Count, error)
	GetValidAuthorizations2(ctx context.Context, in *GetValidAuthorizationsRequest, opts ...grpc.CallOption) (*Authorizations, error)
	// Adders
	NewRegistration(ctx context.Context, in *proto1.Registration, opts ...grpc.CallOption) (*proto1.Registration, error)
	UpdateRegistration(ctx context.Context, in *proto1.Registration, opts ...grpc.CallOption) (*proto1.Empty, error)
	NewPendingAuthorization(ctx context.Context, in *proto1.Authorization, opts ...grpc.CallOption) (*proto1.Authorization, error)
	FinalizeAuthorization(ctx context.Context, in *proto1.Authorization, opts ...grpc.CallOption) (*proto1.Empty, error)
	AddCertificate(ctx context.Context, in *AddCertificateRequest, opts ...grpc.CallOption) (*AddCertificateResponse, error)
	DeactivateRegistration(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*proto1.Empty, error)
	DeactivateAuthorization(ctx context.Context, in *AuthorizationID, opts ...grpc.CallOption) (*proto1.Empty, error)
	NewOrder(ctx context.Context, in *proto1.Order, opts ...grpc.CallOption) (*proto1.Order, error)
	SetOrderProcessing(ctx context.Context, in *proto1.Order, opts ...grpc.CallOption) (*proto1.Empty, error)
	SetOrderError(ctx context.Context, in *proto1.Order, opts ...grpc.CallOption) (*proto1.Empty, error)
	FinalizeOrder(ctx context.Context, in *proto1.Order, opts ...grpc.CallOption) (*proto1.Empty, error)
	GetOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*proto1.Order, error)
	GetValidOrderAuthorizations(ctx context.Context, in *GetValidOrderAuthorizationsRequest, opts ...grpc.CallOption) (*Authorizations, error)
	GetOrderForNames(ctx context.Context, in *GetOrderForNamesRequest, opts ...grpc.CallOption) (*proto1.Order, error)
	GetAuthorizations(ctx context.Context, in *GetAuthorizationsRequest, opts ...grpc.CallOption) (*Authorizations, error)
	AddPendingAuthorizations(ctx context.Context, in *AddPendingAuthorizationsRequest, opts ...grpc.CallOption) (*AuthorizationIDs, error)
	RevokeCertificate(ctx context.Context, in *RevokeCertificateRequest, opts ...grpc.CallOption) (*proto1.Empty, error)
	NewAuthorizations2(ctx context.Context, in *AddPendingAuthorizationsRequest, opts ...grpc.CallOption) (*Authorization2IDs, error)
	FinalizeAuthorization2(ctx context.Context, in *FinalizeAuthorizationRequest, opts ...grpc.CallOption) (*proto1.Empty, error)
	DeactivateAuthorization2(ctx context.Context, in *AuthorizationID2, opts ...grpc.CallOption) (*proto1.Empty, error)
}

type storageAuthorityClient struct {
	cc *grpc.ClientConn
}

func NewStorageAuthorityClient(cc *grpc.ClientConn) StorageAuthorityClient {
	return &storageAuthorityClient{cc}
}

func (c *storageAuthorityClient) GetRegistration(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*proto1.Registration, error) {
	out := new(proto1.Registration)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetRegistrationByKey(ctx context.Context, in *JSONWebKey, opts ...grpc.CallOption) (*proto1.Registration, error) {
	out := new(proto1.Registration)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetRegistrationByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetAuthorization(ctx context.Context, in *AuthorizationID, opts ...grpc.CallOption) (*proto1.Authorization, error) {
	out := new(proto1.Authorization)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetPendingAuthorization(ctx context.Context, in *GetPendingAuthorizationRequest, opts ...grpc.CallOption) (*proto1.Authorization, error) {
	out := new(proto1.Authorization)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetPendingAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetValidAuthorizations(ctx context.Context, in *GetValidAuthorizationsRequest, opts ...grpc.CallOption) (*ValidAuthorizations, error) {
	out := new(ValidAuthorizations)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetValidAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetCertificate(ctx context.Context, in *Serial, opts ...grpc.CallOption) (*proto1.Certificate, error) {
	out := new(proto1.Certificate)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetCertificateStatus(ctx context.Context, in *Serial, opts ...grpc.CallOption) (*CertificateStatus, error) {
	out := new(CertificateStatus)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetCertificateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountCertificatesByNames(ctx context.Context, in *CountCertificatesByNamesRequest, opts ...grpc.CallOption) (*CountByNames, error) {
	out := new(CountByNames)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/CountCertificatesByNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountRegistrationsByIP(ctx context.Context, in *CountRegistrationsByIPRequest, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/CountRegistrationsByIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountRegistrationsByIPRange(ctx context.Context, in *CountRegistrationsByIPRequest, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/CountRegistrationsByIPRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountPendingAuthorizations(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/CountPendingAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountOrders(ctx context.Context, in *CountOrdersRequest, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/CountOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountInvalidAuthorizations(ctx context.Context, in *CountInvalidAuthorizationsRequest, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/CountInvalidAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountFQDNSets(ctx context.Context, in *CountFQDNSetsRequest, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/CountFQDNSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) FQDNSetExists(ctx context.Context, in *FQDNSetExistsRequest, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/FQDNSetExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) PreviousCertificateExists(ctx context.Context, in *PreviousCertificateExistsRequest, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/PreviousCertificateExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetAuthorization2(ctx context.Context, in *AuthorizationID2, opts ...grpc.CallOption) (*proto1.Authorization, error) {
	out := new(proto1.Authorization)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetAuthorization2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetAuthorizations2(ctx context.Context, in *GetAuthorizationsRequest, opts ...grpc.CallOption) (*Authorizations, error) {
	out := new(Authorizations)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetAuthorizations2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetPendingAuthorization2(ctx context.Context, in *GetPendingAuthorizationRequest, opts ...grpc.CallOption) (*proto1.Authorization, error) {
	out := new(proto1.Authorization)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetPendingAuthorization2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountPendingAuthorizations2(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/CountPendingAuthorizations2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetValidOrderAuthorizations2(ctx context.Context, in *GetValidOrderAuthorizationsRequest, opts ...grpc.CallOption) (*Authorizations, error) {
	out := new(Authorizations)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetValidOrderAuthorizations2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) CountInvalidAuthorizations2(ctx context.Context, in *CountInvalidAuthorizationsRequest, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/CountInvalidAuthorizations2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetValidAuthorizations2(ctx context.Context, in *GetValidAuthorizationsRequest, opts ...grpc.CallOption) (*Authorizations, error) {
	out := new(Authorizations)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetValidAuthorizations2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) NewRegistration(ctx context.Context, in *proto1.Registration, opts ...grpc.CallOption) (*proto1.Registration, error) {
	out := new(proto1.Registration)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/NewRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) UpdateRegistration(ctx context.Context, in *proto1.Registration, opts ...grpc.CallOption) (*proto1.Empty, error) {
	out := new(proto1.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/UpdateRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) NewPendingAuthorization(ctx context.Context, in *proto1.Authorization, opts ...grpc.CallOption) (*proto1.Authorization, error) {
	out := new(proto1.Authorization)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/NewPendingAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) FinalizeAuthorization(ctx context.Context, in *proto1.Authorization, opts ...grpc.CallOption) (*proto1.Empty, error) {
	out := new(proto1.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/FinalizeAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) AddCertificate(ctx context.Context, in *AddCertificateRequest, opts ...grpc.CallOption) (*AddCertificateResponse, error) {
	out := new(AddCertificateResponse)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/AddCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) DeactivateRegistration(ctx context.Context, in *RegistrationID, opts ...grpc.CallOption) (*proto1.Empty, error) {
	out := new(proto1.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/DeactivateRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) DeactivateAuthorization(ctx context.Context, in *AuthorizationID, opts ...grpc.CallOption) (*proto1.Empty, error) {
	out := new(proto1.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/DeactivateAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) NewOrder(ctx context.Context, in *proto1.Order, opts ...grpc.CallOption) (*proto1.Order, error) {
	out := new(proto1.Order)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/NewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) SetOrderProcessing(ctx context.Context, in *proto1.Order, opts ...grpc.CallOption) (*proto1.Empty, error) {
	out := new(proto1.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/SetOrderProcessing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) SetOrderError(ctx context.Context, in *proto1.Order, opts ...grpc.CallOption) (*proto1.Empty, error) {
	out := new(proto1.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/SetOrderError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) FinalizeOrder(ctx context.Context, in *proto1.Order, opts ...grpc.CallOption) (*proto1.Empty, error) {
	out := new(proto1.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/FinalizeOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*proto1.Order, error) {
	out := new(proto1.Order)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetValidOrderAuthorizations(ctx context.Context, in *GetValidOrderAuthorizationsRequest, opts ...grpc.CallOption) (*Authorizations, error) {
	out := new(Authorizations)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetValidOrderAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetOrderForNames(ctx context.Context, in *GetOrderForNamesRequest, opts ...grpc.CallOption) (*proto1.Order, error) {
	out := new(proto1.Order)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetOrderForNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) GetAuthorizations(ctx context.Context, in *GetAuthorizationsRequest, opts ...grpc.CallOption) (*Authorizations, error) {
	out := new(Authorizations)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/GetAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) AddPendingAuthorizations(ctx context.Context, in *AddPendingAuthorizationsRequest, opts ...grpc.CallOption) (*AuthorizationIDs, error) {
	out := new(AuthorizationIDs)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/AddPendingAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) RevokeCertificate(ctx context.Context, in *RevokeCertificateRequest, opts ...grpc.CallOption) (*proto1.Empty, error) {
	out := new(proto1.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/RevokeCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) NewAuthorizations2(ctx context.Context, in *AddPendingAuthorizationsRequest, opts ...grpc.CallOption) (*Authorization2IDs, error) {
	out := new(Authorization2IDs)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/NewAuthorizations2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) FinalizeAuthorization2(ctx context.Context, in *FinalizeAuthorizationRequest, opts ...grpc.CallOption) (*proto1.Empty, error) {
	out := new(proto1.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/FinalizeAuthorization2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAuthorityClient) DeactivateAuthorization2(ctx context.Context, in *AuthorizationID2, opts ...grpc.CallOption) (*proto1.Empty, error) {
	out := new(proto1.Empty)
	err := c.cc.Invoke(ctx, "/sa.StorageAuthority/DeactivateAuthorization2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageAuthorityServer is the server API for StorageAuthority service.
type StorageAuthorityServer interface {
	// Getters
	GetRegistration(context.Context, *RegistrationID) (*proto1.Registration, error)
	GetRegistrationByKey(context.Context, *JSONWebKey) (*proto1.Registration, error)
	GetAuthorization(context.Context, *AuthorizationID) (*proto1.Authorization, error)
	GetPendingAuthorization(context.Context, *GetPendingAuthorizationRequest) (*proto1.Authorization, error)
	GetValidAuthorizations(context.Context, *GetValidAuthorizationsRequest) (*ValidAuthorizations, error)
	GetCertificate(context.Context, *Serial) (*proto1.Certificate, error)
	GetCertificateStatus(context.Context, *Serial) (*CertificateStatus, error)
	CountCertificatesByNames(context.Context, *CountCertificatesByNamesRequest) (*CountByNames, error)
	CountRegistrationsByIP(context.Context, *CountRegistrationsByIPRequest) (*Count, error)
	CountRegistrationsByIPRange(context.Context, *CountRegistrationsByIPRequest) (*Count, error)
	CountPendingAuthorizations(context.Context, *RegistrationID) (*Count, error)
	CountOrders(context.Context, *CountOrdersRequest) (*Count, error)
	// Return a count of authorizations with status "invalid" that belong to
	// a given registration ID and expire in the given time range.
	CountInvalidAuthorizations(context.Context, *CountInvalidAuthorizationsRequest) (*Count, error)
	CountFQDNSets(context.Context, *CountFQDNSetsRequest) (*Count, error)
	FQDNSetExists(context.Context, *FQDNSetExistsRequest) (*Exists, error)
	PreviousCertificateExists(context.Context, *PreviousCertificateExistsRequest) (*Exists, error)
	GetAuthorization2(context.Context, *AuthorizationID2) (*proto1.Authorization, error)
	GetAuthorizations2(context.Context, *GetAuthorizationsRequest) (*Authorizations, error)
	GetPendingAuthorization2(context.Context, *GetPendingAuthorizationRequest) (*proto1.Authorization, error)
	CountPendingAuthorizations2(context.Context, *RegistrationID) (*Count, error)
	GetValidOrderAuthorizations2(context.Context, *GetValidOrderAuthorizationsRequest) (*Authorizations, error)
	CountInvalidAuthorizations2(context.Context, *CountInvalidAuthorizationsRequest) (*Count, error)
	GetValidAuthorizations2(context.Context, *GetValidAuthorizationsRequest) (*Authorizations, error)
	// Adders
	NewRegistration(context.Context, *proto1.Registration) (*proto1.Registration, error)
	UpdateRegistration(context.Context, *proto1.Registration) (*proto1.Empty, error)
	NewPendingAuthorization(context.Context, *proto1.Authorization) (*proto1.Authorization, error)
	FinalizeAuthorization(context.Context, *proto1.Authorization) (*proto1.Empty, error)
	AddCertificate(context.Context, *AddCertificateRequest) (*AddCertificateResponse, error)
	DeactivateRegistration(context.Context, *RegistrationID) (*proto1.Empty, error)
	DeactivateAuthorization(context.Context, *AuthorizationID) (*proto1.Empty, error)
	NewOrder(context.Context, *proto1.Order) (*proto1.Order, error)
	SetOrderProcessing(context.Context, *proto1.Order) (*proto1.Empty, error)
	SetOrderError(context.Context, *proto1.Order) (*proto1.Empty, error)
	FinalizeOrder(context.Context, *proto1.Order) (*proto1.Empty, error)
	GetOrder(context.Context, *OrderRequest) (*proto1.Order, error)
	GetValidOrderAuthorizations(context.Context, *GetValidOrderAuthorizationsRequest) (*Authorizations, error)
	GetOrderForNames(context.Context, *GetOrderForNamesRequest) (*proto1.Order, error)
	GetAuthorizations(context.Context, *GetAuthorizationsRequest) (*Authorizations, error)
	AddPendingAuthorizations(context.Context, *AddPendingAuthorizationsRequest) (*AuthorizationIDs, error)
	RevokeCertificate(context.Context, *RevokeCertificateRequest) (*proto1.Empty, error)
	NewAuthorizations2(context.Context, *AddPendingAuthorizationsRequest) (*Authorization2IDs, error)
	FinalizeAuthorization2(context.Context, *FinalizeAuthorizationRequest) (*proto1.Empty, error)
	DeactivateAuthorization2(context.Context, *AuthorizationID2) (*proto1.Empty, error)
}

// UnimplementedStorageAuthorityServer can be embedded to have forward compatible implementations.
type UnimplementedStorageAuthorityServer struct {
}

func (*UnimplementedStorageAuthorityServer) GetRegistration(ctx context.Context, req *RegistrationID) (*proto1.Registration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistration not implemented")
}
func (*UnimplementedStorageAuthorityServer) GetRegistrationByKey(ctx context.Context, req *JSONWebKey) (*proto1.Registration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistrationByKey not implemented")
}
func (*UnimplementedStorageAuthorityServer) GetAuthorization(ctx context.Context, req *AuthorizationID) (*proto1.Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorization not implemented")
}
func (*UnimplementedStorageAuthorityServer) GetPendingAuthorization(ctx context.Context, req *GetPendingAuthorizationRequest) (*proto1.Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingAuthorization not implemented")
}
func (*UnimplementedStorageAuthorityServer) GetValidAuthorizations(ctx context.Context, req *GetValidAuthorizationsRequest) (*ValidAuthorizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidAuthorizations not implemented")
}
func (*UnimplementedStorageAuthorityServer) GetCertificate(ctx context.Context, req *Serial) (*proto1.Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificate not implemented")
}
func (*UnimplementedStorageAuthorityServer) GetCertificateStatus(ctx context.Context, req *Serial) (*CertificateStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateStatus not implemented")
}
func (*UnimplementedStorageAuthorityServer) CountCertificatesByNames(ctx context.Context, req *CountCertificatesByNamesRequest) (*CountByNames, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCertificatesByNames not implemented")
}
func (*UnimplementedStorageAuthorityServer) CountRegistrationsByIP(ctx context.Context, req *CountRegistrationsByIPRequest) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountRegistrationsByIP not implemented")
}
func (*UnimplementedStorageAuthorityServer) CountRegistrationsByIPRange(ctx context.Context, req *CountRegistrationsByIPRequest) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountRegistrationsByIPRange not implemented")
}
func (*UnimplementedStorageAuthorityServer) CountPendingAuthorizations(ctx context.Context, req *RegistrationID) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPendingAuthorizations not implemented")
}
func (*UnimplementedStorageAuthorityServer) CountOrders(ctx context.Context, req *CountOrdersRequest) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountOrders not implemented")
}
func (*UnimplementedStorageAuthorityServer) CountInvalidAuthorizations(ctx context.Context, req *CountInvalidAuthorizationsRequest) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountInvalidAuthorizations not implemented")
}
func (*UnimplementedStorageAuthorityServer) CountFQDNSets(ctx context.Context, req *CountFQDNSetsRequest) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountFQDNSets not implemented")
}
func (*UnimplementedStorageAuthorityServer) FQDNSetExists(ctx context.Context, req *FQDNSetExistsRequest) (*Exists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FQDNSetExists not implemented")
}
func (*UnimplementedStorageAuthorityServer) PreviousCertificateExists(ctx context.Context, req *PreviousCertificateExistsRequest) (*Exists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviousCertificateExists not implemented")
}
func (*UnimplementedStorageAuthorityServer) GetAuthorization2(ctx context.Context, req *AuthorizationID2) (*proto1.Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorization2 not implemented")
}
func (*UnimplementedStorageAuthorityServer) GetAuthorizations2(ctx context.Context, req *GetAuthorizationsRequest) (*Authorizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizations2 not implemented")
}
func (*UnimplementedStorageAuthorityServer) GetPendingAuthorization2(ctx context.Context, req *GetPendingAuthorizationRequest) (*proto1.Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingAuthorization2 not implemented")
}
func (*UnimplementedStorageAuthorityServer) CountPendingAuthorizations2(ctx context.Context, req *RegistrationID) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPendingAuthorizations2 not implemented")
}
func (*UnimplementedStorageAuthorityServer) GetValidOrderAuthorizations2(ctx context.Context, req *GetValidOrderAuthorizationsRequest) (*Authorizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidOrderAuthorizations2 not implemented")
}
func (*UnimplementedStorageAuthorityServer) CountInvalidAuthorizations2(ctx context.Context, req *CountInvalidAuthorizationsRequest) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountInvalidAuthorizations2 not implemented")
}
func (*UnimplementedStorageAuthorityServer) GetValidAuthorizations2(ctx context.Context, req *GetValidAuthorizationsRequest) (*Authorizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidAuthorizations2 not implemented")
}
func (*UnimplementedStorageAuthorityServer) NewRegistration(ctx context.Context, req *proto1.Registration) (*proto1.Registration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRegistration not implemented")
}
func (*UnimplementedStorageAuthorityServer) UpdateRegistration(ctx context.Context, req *proto1.Registration) (*proto1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegistration not implemented")
}
func (*UnimplementedStorageAuthorityServer) NewPendingAuthorization(ctx context.Context, req *proto1.Authorization) (*proto1.Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPendingAuthorization not implemented")
}
func (*UnimplementedStorageAuthorityServer) FinalizeAuthorization(ctx context.Context, req *proto1.Authorization) (*proto1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeAuthorization not implemented")
}
func (*UnimplementedStorageAuthorityServer) AddCertificate(ctx context.Context, req *AddCertificateRequest) (*AddCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCertificate not implemented")
}
func (*UnimplementedStorageAuthorityServer) DeactivateRegistration(ctx context.Context, req *RegistrationID) (*proto1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateRegistration not implemented")
}
func (*UnimplementedStorageAuthorityServer) DeactivateAuthorization(ctx context.Context, req *AuthorizationID) (*proto1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateAuthorization not implemented")
}
func (*UnimplementedStorageAuthorityServer) NewOrder(ctx context.Context, req *proto1.Order) (*proto1.Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOrder not implemented")
}
func (*UnimplementedStorageAuthorityServer) SetOrderProcessing(ctx context.Context, req *proto1.Order) (*proto1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrderProcessing not implemented")
}
func (*UnimplementedStorageAuthorityServer) SetOrderError(ctx context.Context, req *proto1.Order) (*proto1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrderError not implemented")
}
func (*UnimplementedStorageAuthorityServer) FinalizeOrder(ctx context.Context, req *proto1.Order) (*proto1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeOrder not implemented")
}
func (*UnimplementedStorageAuthorityServer) GetOrder(ctx context.Context, req *OrderRequest) (*proto1.Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (*UnimplementedStorageAuthorityServer) GetValidOrderAuthorizations(ctx context.Context, req *GetValidOrderAuthorizationsRequest) (*Authorizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidOrderAuthorizations not implemented")
}
func (*UnimplementedStorageAuthorityServer) GetOrderForNames(ctx context.Context, req *GetOrderForNamesRequest) (*proto1.Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderForNames not implemented")
}
func (*UnimplementedStorageAuthorityServer) GetAuthorizations(ctx context.Context, req *GetAuthorizationsRequest) (*Authorizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizations not implemented")
}
func (*UnimplementedStorageAuthorityServer) AddPendingAuthorizations(ctx context.Context, req *AddPendingAuthorizationsRequest) (*AuthorizationIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPendingAuthorizations not implemented")
}
func (*UnimplementedStorageAuthorityServer) RevokeCertificate(ctx context.Context, req *RevokeCertificateRequest) (*proto1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCertificate not implemented")
}
func (*UnimplementedStorageAuthorityServer) NewAuthorizations2(ctx context.Context, req *AddPendingAuthorizationsRequest) (*Authorization2IDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAuthorizations2 not implemented")
}
func (*UnimplementedStorageAuthorityServer) FinalizeAuthorization2(ctx context.Context, req *FinalizeAuthorizationRequest) (*proto1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeAuthorization2 not implemented")
}
func (*UnimplementedStorageAuthorityServer) DeactivateAuthorization2(ctx context.Context, req *AuthorizationID2) (*proto1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateAuthorization2 not implemented")
}

func RegisterStorageAuthorityServer(s *grpc.Server, srv StorageAuthorityServer) {
	s.RegisterService(&_StorageAuthority_serviceDesc, srv)
}

func _StorageAuthority_GetRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetRegistration(ctx, req.(*RegistrationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetRegistrationByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JSONWebKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetRegistrationByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetRegistrationByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetRegistrationByKey(ctx, req.(*JSONWebKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetAuthorization(ctx, req.(*AuthorizationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetPendingAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetPendingAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetPendingAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetPendingAuthorization(ctx, req.(*GetPendingAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetValidAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetValidAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetValidAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetValidAuthorizations(ctx, req.(*GetValidAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Serial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetCertificate(ctx, req.(*Serial))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetCertificateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Serial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetCertificateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetCertificateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetCertificateStatus(ctx, req.(*Serial))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountCertificatesByNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCertificatesByNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountCertificatesByNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountCertificatesByNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountCertificatesByNames(ctx, req.(*CountCertificatesByNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountRegistrationsByIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRegistrationsByIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountRegistrationsByIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountRegistrationsByIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountRegistrationsByIP(ctx, req.(*CountRegistrationsByIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountRegistrationsByIPRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRegistrationsByIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountRegistrationsByIPRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountRegistrationsByIPRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountRegistrationsByIPRange(ctx, req.(*CountRegistrationsByIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountPendingAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountPendingAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountPendingAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountPendingAuthorizations(ctx, req.(*RegistrationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountOrders(ctx, req.(*CountOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountInvalidAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountInvalidAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountInvalidAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountInvalidAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountInvalidAuthorizations(ctx, req.(*CountInvalidAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountFQDNSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountFQDNSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountFQDNSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountFQDNSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountFQDNSets(ctx, req.(*CountFQDNSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_FQDNSetExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FQDNSetExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).FQDNSetExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/FQDNSetExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).FQDNSetExists(ctx, req.(*FQDNSetExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_PreviousCertificateExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviousCertificateExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).PreviousCertificateExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/PreviousCertificateExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).PreviousCertificateExists(ctx, req.(*PreviousCertificateExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetAuthorization2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationID2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetAuthorization2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetAuthorization2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetAuthorization2(ctx, req.(*AuthorizationID2))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetAuthorizations2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetAuthorizations2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetAuthorizations2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetAuthorizations2(ctx, req.(*GetAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetPendingAuthorization2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetPendingAuthorization2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetPendingAuthorization2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetPendingAuthorization2(ctx, req.(*GetPendingAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountPendingAuthorizations2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountPendingAuthorizations2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountPendingAuthorizations2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountPendingAuthorizations2(ctx, req.(*RegistrationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetValidOrderAuthorizations2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidOrderAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetValidOrderAuthorizations2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetValidOrderAuthorizations2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetValidOrderAuthorizations2(ctx, req.(*GetValidOrderAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_CountInvalidAuthorizations2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountInvalidAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).CountInvalidAuthorizations2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/CountInvalidAuthorizations2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).CountInvalidAuthorizations2(ctx, req.(*CountInvalidAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetValidAuthorizations2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetValidAuthorizations2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetValidAuthorizations2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetValidAuthorizations2(ctx, req.(*GetValidAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_NewRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).NewRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/NewRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).NewRegistration(ctx, req.(*proto1.Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_UpdateRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).UpdateRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/UpdateRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).UpdateRegistration(ctx, req.(*proto1.Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_NewPendingAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Authorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).NewPendingAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/NewPendingAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).NewPendingAuthorization(ctx, req.(*proto1.Authorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_FinalizeAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Authorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).FinalizeAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/FinalizeAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).FinalizeAuthorization(ctx, req.(*proto1.Authorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_AddCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).AddCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/AddCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).AddCertificate(ctx, req.(*AddCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_DeactivateRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).DeactivateRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/DeactivateRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).DeactivateRegistration(ctx, req.(*RegistrationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_DeactivateAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).DeactivateAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/DeactivateAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).DeactivateAuthorization(ctx, req.(*AuthorizationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_NewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).NewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/NewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).NewOrder(ctx, req.(*proto1.Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_SetOrderProcessing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).SetOrderProcessing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/SetOrderProcessing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).SetOrderProcessing(ctx, req.(*proto1.Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_SetOrderError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).SetOrderError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/SetOrderError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).SetOrderError(ctx, req.(*proto1.Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_FinalizeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).FinalizeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/FinalizeOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).FinalizeOrder(ctx, req.(*proto1.Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetValidOrderAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidOrderAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetValidOrderAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetValidOrderAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetValidOrderAuthorizations(ctx, req.(*GetValidOrderAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetOrderForNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderForNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetOrderForNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetOrderForNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetOrderForNames(ctx, req.(*GetOrderForNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_GetAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).GetAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/GetAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).GetAuthorizations(ctx, req.(*GetAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_AddPendingAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPendingAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).AddPendingAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/AddPendingAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).AddPendingAuthorizations(ctx, req.(*AddPendingAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_RevokeCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).RevokeCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/RevokeCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).RevokeCertificate(ctx, req.(*RevokeCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_NewAuthorizations2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPendingAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).NewAuthorizations2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/NewAuthorizations2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).NewAuthorizations2(ctx, req.(*AddPendingAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_FinalizeAuthorization2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).FinalizeAuthorization2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/FinalizeAuthorization2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).FinalizeAuthorization2(ctx, req.(*FinalizeAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAuthority_DeactivateAuthorization2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationID2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAuthorityServer).DeactivateAuthorization2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sa.StorageAuthority/DeactivateAuthorization2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAuthorityServer).DeactivateAuthorization2(ctx, req.(*AuthorizationID2))
	}
	return interceptor(ctx, in, info, handler)
}

var _StorageAuthority_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sa.StorageAuthority",
	HandlerType: (*StorageAuthorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegistration",
			Handler:    _StorageAuthority_GetRegistration_Handler,
		},
		{
			MethodName: "GetRegistrationByKey",
			Handler:    _StorageAuthority_GetRegistrationByKey_Handler,
		},
		{
			MethodName: "GetAuthorization",
			Handler:    _StorageAuthority_GetAuthorization_Handler,
		},
		{
			MethodName: "GetPendingAuthorization",
			Handler:    _StorageAuthority_GetPendingAuthorization_Handler,
		},
		{
			MethodName: "GetValidAuthorizations",
			Handler:    _StorageAuthority_GetValidAuthorizations_Handler,
		},
		{
			MethodName: "GetCertificate",
			Handler:    _StorageAuthority_GetCertificate_Handler,
		},
		{
			MethodName: "GetCertificateStatus",
			Handler:    _StorageAuthority_GetCertificateStatus_Handler,
		},
		{
			MethodName: "CountCertificatesByNames",
			Handler:    _StorageAuthority_CountCertificatesByNames_Handler,
		},
		{
			MethodName: "CountRegistrationsByIP",
			Handler:    _StorageAuthority_CountRegistrationsByIP_Handler,
		},
		{
			MethodName: "CountRegistrationsByIPRange",
			Handler:    _StorageAuthority_CountRegistrationsByIPRange_Handler,
		},
		{
			MethodName: "CountPendingAuthorizations",
			Handler:    _StorageAuthority_CountPendingAuthorizations_Handler,
		},
		{
			MethodName: "CountOrders",
			Handler:    _StorageAuthority_CountOrders_Handler,
		},
		{
			MethodName: "CountInvalidAuthorizations",
			Handler:    _StorageAuthority_CountInvalidAuthorizations_Handler,
		},
		{
			MethodName: "CountFQDNSets",
			Handler:    _StorageAuthority_CountFQDNSets_Handler,
		},
		{
			MethodName: "FQDNSetExists",
			Handler:    _StorageAuthority_FQDNSetExists_Handler,
		},
		{
			MethodName: "PreviousCertificateExists",
			Handler:    _StorageAuthority_PreviousCertificateExists_Handler,
		},
		{
			MethodName: "GetAuthorization2",
			Handler:    _StorageAuthority_GetAuthorization2_Handler,
		},
		{
			MethodName: "GetAuthorizations2",
			Handler:    _StorageAuthority_GetAuthorizations2_Handler,
		},
		{
			MethodName: "GetPendingAuthorization2",
			Handler:    _StorageAuthority_GetPendingAuthorization2_Handler,
		},
		{
			MethodName: "CountPendingAuthorizations2",
			Handler:    _StorageAuthority_CountPendingAuthorizations2_Handler,
		},
		{
			MethodName: "GetValidOrderAuthorizations2",
			Handler:    _StorageAuthority_GetValidOrderAuthorizations2_Handler,
		},
		{
			MethodName: "CountInvalidAuthorizations2",
			Handler:    _StorageAuthority_CountInvalidAuthorizations2_Handler,
		},
		{
			MethodName: "GetValidAuthorizations2",
			Handler:    _StorageAuthority_GetValidAuthorizations2_Handler,
		},
		{
			MethodName: "NewRegistration",
			Handler:    _StorageAuthority_NewRegistration_Handler,
		},
		{
			MethodName: "UpdateRegistration",
			Handler:    _StorageAuthority_UpdateRegistration_Handler,
		},
		{
			MethodName: "NewPendingAuthorization",
			Handler:    _StorageAuthority_NewPendingAuthorization_Handler,
		},
		{
			MethodName: "FinalizeAuthorization",
			Handler:    _StorageAuthority_FinalizeAuthorization_Handler,
		},
		{
			MethodName: "AddCertificate",
			Handler:    _StorageAuthority_AddCertificate_Handler,
		},
		{
			MethodName: "DeactivateRegistration",
			Handler:    _StorageAuthority_DeactivateRegistration_Handler,
		},
		{
			MethodName: "DeactivateAuthorization",
			Handler:    _StorageAuthority_DeactivateAuthorization_Handler,
		},
		{
			MethodName: "NewOrder",
			Handler:    _StorageAuthority_NewOrder_Handler,
		},
		{
			MethodName: "SetOrderProcessing",
			Handler:    _StorageAuthority_SetOrderProcessing_Handler,
		},
		{
			MethodName: "SetOrderError",
			Handler:    _StorageAuthority_SetOrderError_Handler,
		},
		{
			MethodName: "FinalizeOrder",
			Handler:    _StorageAuthority_FinalizeOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _StorageAuthority_GetOrder_Handler,
		},
		{
			MethodName: "GetValidOrderAuthorizations",
			Handler:    _StorageAuthority_GetValidOrderAuthorizations_Handler,
		},
		{
			MethodName: "GetOrderForNames",
			Handler:    _StorageAuthority_GetOrderForNames_Handler,
		},
		{
			MethodName: "GetAuthorizations",
			Handler:    _StorageAuthority_GetAuthorizations_Handler,
		},
		{
			MethodName: "AddPendingAuthorizations",
			Handler:    _StorageAuthority_AddPendingAuthorizations_Handler,
		},
		{
			MethodName: "RevokeCertificate",
			Handler:    _StorageAuthority_RevokeCertificate_Handler,
		},
		{
			MethodName: "NewAuthorizations2",
			Handler:    _StorageAuthority_NewAuthorizations2_Handler,
		},
		{
			MethodName: "FinalizeAuthorization2",
			Handler:    _StorageAuthority_FinalizeAuthorization2_Handler,
		},
		{
			MethodName: "DeactivateAuthorization2",
			Handler:    _StorageAuthority_DeactivateAuthorization2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sa/proto/sa.proto",
}
