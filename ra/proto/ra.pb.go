// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ra/proto/ra.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/zzma/boulder/core/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NewAuthorizationRequest struct {
	Authz                *proto1.Authorization `protobuf:"bytes,1,opt,name=authz" json:"authz,omitempty"`
	RegID                *int64                `protobuf:"varint,2,opt,name=regID" json:"regID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NewAuthorizationRequest) Reset()         { *m = NewAuthorizationRequest{} }
func (m *NewAuthorizationRequest) String() string { return proto.CompactTextString(m) }
func (*NewAuthorizationRequest) ProtoMessage()    {}
func (*NewAuthorizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3baba040132fbcd, []int{0}
}

func (m *NewAuthorizationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewAuthorizationRequest.Unmarshal(m, b)
}
func (m *NewAuthorizationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewAuthorizationRequest.Marshal(b, m, deterministic)
}
func (m *NewAuthorizationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewAuthorizationRequest.Merge(m, src)
}
func (m *NewAuthorizationRequest) XXX_Size() int {
	return xxx_messageInfo_NewAuthorizationRequest.Size(m)
}
func (m *NewAuthorizationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewAuthorizationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewAuthorizationRequest proto.InternalMessageInfo

func (m *NewAuthorizationRequest) GetAuthz() *proto1.Authorization {
	if m != nil {
		return m.Authz
	}
	return nil
}

func (m *NewAuthorizationRequest) GetRegID() int64 {
	if m != nil && m.RegID != nil {
		return *m.RegID
	}
	return 0
}

type NewCertificateRequest struct {
	Csr                  []byte   `protobuf:"bytes,1,opt,name=csr" json:"csr,omitempty"`
	RegID                *int64   `protobuf:"varint,2,opt,name=regID" json:"regID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewCertificateRequest) Reset()         { *m = NewCertificateRequest{} }
func (m *NewCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*NewCertificateRequest) ProtoMessage()    {}
func (*NewCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3baba040132fbcd, []int{1}
}

func (m *NewCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewCertificateRequest.Unmarshal(m, b)
}
func (m *NewCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewCertificateRequest.Marshal(b, m, deterministic)
}
func (m *NewCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCertificateRequest.Merge(m, src)
}
func (m *NewCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_NewCertificateRequest.Size(m)
}
func (m *NewCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewCertificateRequest proto.InternalMessageInfo

func (m *NewCertificateRequest) GetCsr() []byte {
	if m != nil {
		return m.Csr
	}
	return nil
}

func (m *NewCertificateRequest) GetRegID() int64 {
	if m != nil && m.RegID != nil {
		return *m.RegID
	}
	return 0
}

type UpdateRegistrationRequest struct {
	Base                 *proto1.Registration `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Update               *proto1.Registration `protobuf:"bytes,2,opt,name=update" json:"update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UpdateRegistrationRequest) Reset()         { *m = UpdateRegistrationRequest{} }
func (m *UpdateRegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRegistrationRequest) ProtoMessage()    {}
func (*UpdateRegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3baba040132fbcd, []int{2}
}

func (m *UpdateRegistrationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRegistrationRequest.Unmarshal(m, b)
}
func (m *UpdateRegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRegistrationRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRegistrationRequest.Merge(m, src)
}
func (m *UpdateRegistrationRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRegistrationRequest.Size(m)
}
func (m *UpdateRegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRegistrationRequest proto.InternalMessageInfo

func (m *UpdateRegistrationRequest) GetBase() *proto1.Registration {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *UpdateRegistrationRequest) GetUpdate() *proto1.Registration {
	if m != nil {
		return m.Update
	}
	return nil
}

type UpdateAuthorizationRequest struct {
	Authz                *proto1.Authorization `protobuf:"bytes,1,opt,name=authz" json:"authz,omitempty"`
	ChallengeIndex       *int64                `protobuf:"varint,2,opt,name=challengeIndex" json:"challengeIndex,omitempty"`
	Response             *proto1.Challenge     `protobuf:"bytes,3,opt,name=response" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateAuthorizationRequest) Reset()         { *m = UpdateAuthorizationRequest{} }
func (m *UpdateAuthorizationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAuthorizationRequest) ProtoMessage()    {}
func (*UpdateAuthorizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3baba040132fbcd, []int{3}
}

func (m *UpdateAuthorizationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAuthorizationRequest.Unmarshal(m, b)
}
func (m *UpdateAuthorizationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAuthorizationRequest.Marshal(b, m, deterministic)
}
func (m *UpdateAuthorizationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAuthorizationRequest.Merge(m, src)
}
func (m *UpdateAuthorizationRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateAuthorizationRequest.Size(m)
}
func (m *UpdateAuthorizationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAuthorizationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAuthorizationRequest proto.InternalMessageInfo

func (m *UpdateAuthorizationRequest) GetAuthz() *proto1.Authorization {
	if m != nil {
		return m.Authz
	}
	return nil
}

func (m *UpdateAuthorizationRequest) GetChallengeIndex() int64 {
	if m != nil && m.ChallengeIndex != nil {
		return *m.ChallengeIndex
	}
	return 0
}

func (m *UpdateAuthorizationRequest) GetResponse() *proto1.Challenge {
	if m != nil {
		return m.Response
	}
	return nil
}

type PerformValidationRequest struct {
	Authz                *proto1.Authorization `protobuf:"bytes,1,opt,name=authz" json:"authz,omitempty"`
	ChallengeIndex       *int64                `protobuf:"varint,2,opt,name=challengeIndex" json:"challengeIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PerformValidationRequest) Reset()         { *m = PerformValidationRequest{} }
func (m *PerformValidationRequest) String() string { return proto.CompactTextString(m) }
func (*PerformValidationRequest) ProtoMessage()    {}
func (*PerformValidationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3baba040132fbcd, []int{4}
}

func (m *PerformValidationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PerformValidationRequest.Unmarshal(m, b)
}
func (m *PerformValidationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PerformValidationRequest.Marshal(b, m, deterministic)
}
func (m *PerformValidationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerformValidationRequest.Merge(m, src)
}
func (m *PerformValidationRequest) XXX_Size() int {
	return xxx_messageInfo_PerformValidationRequest.Size(m)
}
func (m *PerformValidationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PerformValidationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PerformValidationRequest proto.InternalMessageInfo

func (m *PerformValidationRequest) GetAuthz() *proto1.Authorization {
	if m != nil {
		return m.Authz
	}
	return nil
}

func (m *PerformValidationRequest) GetChallengeIndex() int64 {
	if m != nil && m.ChallengeIndex != nil {
		return *m.ChallengeIndex
	}
	return 0
}

type RevokeCertificateWithRegRequest struct {
	Cert                 []byte   `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	Code                 *int64   `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	RegID                *int64   `protobuf:"varint,3,opt,name=regID" json:"regID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevokeCertificateWithRegRequest) Reset()         { *m = RevokeCertificateWithRegRequest{} }
func (m *RevokeCertificateWithRegRequest) String() string { return proto.CompactTextString(m) }
func (*RevokeCertificateWithRegRequest) ProtoMessage()    {}
func (*RevokeCertificateWithRegRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3baba040132fbcd, []int{5}
}

func (m *RevokeCertificateWithRegRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevokeCertificateWithRegRequest.Unmarshal(m, b)
}
func (m *RevokeCertificateWithRegRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevokeCertificateWithRegRequest.Marshal(b, m, deterministic)
}
func (m *RevokeCertificateWithRegRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokeCertificateWithRegRequest.Merge(m, src)
}
func (m *RevokeCertificateWithRegRequest) XXX_Size() int {
	return xxx_messageInfo_RevokeCertificateWithRegRequest.Size(m)
}
func (m *RevokeCertificateWithRegRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokeCertificateWithRegRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RevokeCertificateWithRegRequest proto.InternalMessageInfo

func (m *RevokeCertificateWithRegRequest) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *RevokeCertificateWithRegRequest) GetCode() int64 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *RevokeCertificateWithRegRequest) GetRegID() int64 {
	if m != nil && m.RegID != nil {
		return *m.RegID
	}
	return 0
}

type AdministrativelyRevokeCertificateRequest struct {
	Cert                 []byte   `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	Code                 *int64   `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	AdminName            *string  `protobuf:"bytes,3,opt,name=adminName" json:"adminName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdministrativelyRevokeCertificateRequest) Reset() {
	*m = AdministrativelyRevokeCertificateRequest{}
}
func (m *AdministrativelyRevokeCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*AdministrativelyRevokeCertificateRequest) ProtoMessage()    {}
func (*AdministrativelyRevokeCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3baba040132fbcd, []int{6}
}

func (m *AdministrativelyRevokeCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdministrativelyRevokeCertificateRequest.Unmarshal(m, b)
}
func (m *AdministrativelyRevokeCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdministrativelyRevokeCertificateRequest.Marshal(b, m, deterministic)
}
func (m *AdministrativelyRevokeCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdministrativelyRevokeCertificateRequest.Merge(m, src)
}
func (m *AdministrativelyRevokeCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_AdministrativelyRevokeCertificateRequest.Size(m)
}
func (m *AdministrativelyRevokeCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdministrativelyRevokeCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdministrativelyRevokeCertificateRequest proto.InternalMessageInfo

func (m *AdministrativelyRevokeCertificateRequest) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *AdministrativelyRevokeCertificateRequest) GetCode() int64 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *AdministrativelyRevokeCertificateRequest) GetAdminName() string {
	if m != nil && m.AdminName != nil {
		return *m.AdminName
	}
	return ""
}

type NewOrderRequest struct {
	RegistrationID       *int64   `protobuf:"varint,1,opt,name=registrationID" json:"registrationID,omitempty"`
	Names                []string `protobuf:"bytes,2,rep,name=names" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewOrderRequest) Reset()         { *m = NewOrderRequest{} }
func (m *NewOrderRequest) String() string { return proto.CompactTextString(m) }
func (*NewOrderRequest) ProtoMessage()    {}
func (*NewOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3baba040132fbcd, []int{7}
}

func (m *NewOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewOrderRequest.Unmarshal(m, b)
}
func (m *NewOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewOrderRequest.Marshal(b, m, deterministic)
}
func (m *NewOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewOrderRequest.Merge(m, src)
}
func (m *NewOrderRequest) XXX_Size() int {
	return xxx_messageInfo_NewOrderRequest.Size(m)
}
func (m *NewOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewOrderRequest proto.InternalMessageInfo

func (m *NewOrderRequest) GetRegistrationID() int64 {
	if m != nil && m.RegistrationID != nil {
		return *m.RegistrationID
	}
	return 0
}

func (m *NewOrderRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type FinalizeOrderRequest struct {
	Order                *proto1.Order `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
	Csr                  []byte        `protobuf:"bytes,2,opt,name=csr" json:"csr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FinalizeOrderRequest) Reset()         { *m = FinalizeOrderRequest{} }
func (m *FinalizeOrderRequest) String() string { return proto.CompactTextString(m) }
func (*FinalizeOrderRequest) ProtoMessage()    {}
func (*FinalizeOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3baba040132fbcd, []int{8}
}

func (m *FinalizeOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FinalizeOrderRequest.Unmarshal(m, b)
}
func (m *FinalizeOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FinalizeOrderRequest.Marshal(b, m, deterministic)
}
func (m *FinalizeOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizeOrderRequest.Merge(m, src)
}
func (m *FinalizeOrderRequest) XXX_Size() int {
	return xxx_messageInfo_FinalizeOrderRequest.Size(m)
}
func (m *FinalizeOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizeOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizeOrderRequest proto.InternalMessageInfo

func (m *FinalizeOrderRequest) GetOrder() *proto1.Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *FinalizeOrderRequest) GetCsr() []byte {
	if m != nil {
		return m.Csr
	}
	return nil
}

func init() {
	proto.RegisterType((*NewAuthorizationRequest)(nil), "ra.NewAuthorizationRequest")
	proto.RegisterType((*NewCertificateRequest)(nil), "ra.NewCertificateRequest")
	proto.RegisterType((*UpdateRegistrationRequest)(nil), "ra.UpdateRegistrationRequest")
	proto.RegisterType((*UpdateAuthorizationRequest)(nil), "ra.UpdateAuthorizationRequest")
	proto.RegisterType((*PerformValidationRequest)(nil), "ra.PerformValidationRequest")
	proto.RegisterType((*RevokeCertificateWithRegRequest)(nil), "ra.RevokeCertificateWithRegRequest")
	proto.RegisterType((*AdministrativelyRevokeCertificateRequest)(nil), "ra.AdministrativelyRevokeCertificateRequest")
	proto.RegisterType((*NewOrderRequest)(nil), "ra.NewOrderRequest")
	proto.RegisterType((*FinalizeOrderRequest)(nil), "ra.FinalizeOrderRequest")
}

func init() { proto.RegisterFile("ra/proto/ra.proto", fileDescriptor_f3baba040132fbcd) }

var fileDescriptor_f3baba040132fbcd = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xdb, 0x6e, 0xd3, 0x4c,
	0x10, 0x4e, 0xe2, 0xa6, 0x7f, 0x3b, 0xfd, 0xe9, 0x61, 0xda, 0x52, 0xd7, 0x14, 0xd1, 0x2e, 0x52,
	0x15, 0x0e, 0x4a, 0xa5, 0x5e, 0x21, 0x55, 0x08, 0x4a, 0x4b, 0x45, 0x84, 0x94, 0x22, 0x4b, 0x80,
	0xd4, 0x1b, 0x58, 0xec, 0x69, 0x62, 0x11, 0xdb, 0x61, 0xbd, 0x49, 0x48, 0x5e, 0x81, 0x57, 0xe0,
	0x61, 0x91, 0xd7, 0x9b, 0xc6, 0x76, 0x6c, 0x15, 0x84, 0xb8, 0x9b, 0x9d, 0xc3, 0x37, 0x33, 0xfe,
	0xe6, 0x93, 0x61, 0x43, 0xf0, 0xa3, 0xbe, 0x08, 0x65, 0x78, 0x24, 0x78, 0x53, 0x19, 0x58, 0x13,
	0xdc, 0xda, 0x76, 0x42, 0x41, 0x3a, 0x10, 0x9b, 0x49, 0x88, 0x5d, 0xc1, 0x4e, 0x9b, 0x46, 0xa7,
	0x03, 0xd9, 0x0d, 0x85, 0x37, 0xe1, 0xd2, 0x0b, 0x03, 0x9b, 0xbe, 0x0d, 0x28, 0x92, 0xf8, 0x08,
	0xea, 0x7c, 0x20, 0xbb, 0x13, 0xb3, 0xba, 0x5f, 0x6d, 0xac, 0x1c, 0x6f, 0x36, 0x55, 0x59, 0x36,
	0x35, 0xc9, 0xc0, 0x2d, 0xa8, 0x0b, 0xea, 0xb4, 0xce, 0xcd, 0xda, 0x7e, 0xb5, 0x61, 0xd8, 0xc9,
	0x83, 0xbd, 0x80, 0xed, 0x36, 0x8d, 0xce, 0x48, 0x48, 0xef, 0xda, 0x73, 0xb8, 0xa4, 0x29, 0xf2,
	0x3a, 0x18, 0x4e, 0x24, 0x14, 0xee, 0xff, 0x76, 0x6c, 0x96, 0x00, 0x84, 0xb0, 0xfb, 0xbe, 0xef,
	0xaa, 0xc2, 0x8e, 0x17, 0x49, 0x91, 0x19, 0xef, 0x10, 0x16, 0xbe, 0xf0, 0x88, 0xf4, 0x74, 0x98,
	0x4c, 0x97, 0x49, 0x54, 0x71, 0x7c, 0x0c, 0x8b, 0x03, 0x05, 0xa2, 0xb0, 0x8b, 0x33, 0x75, 0x06,
	0xfb, 0x59, 0x05, 0x2b, 0xe9, 0xf8, 0xb7, 0x5f, 0xe4, 0x10, 0x56, 0x9d, 0x2e, 0xef, 0xf5, 0x28,
	0xe8, 0x50, 0x2b, 0x70, 0xe9, 0xbb, 0xde, 0x2c, 0xe7, 0xc5, 0x27, 0xb0, 0x24, 0x28, 0xea, 0x87,
	0x41, 0x44, 0xa6, 0xa1, 0x50, 0xd7, 0x12, 0xd4, 0xb3, 0x69, 0x9e, 0x7d, 0x93, 0xc0, 0x7c, 0x30,
	0xdf, 0x91, 0xb8, 0x0e, 0x85, 0xff, 0x81, 0xf7, 0x3c, 0xf7, 0x1f, 0xcf, 0xc6, 0x3e, 0xc1, 0x03,
	0x9b, 0x86, 0xe1, 0x57, 0x4a, 0x51, 0xf8, 0xd1, 0x93, 0x5d, 0x9b, 0x3a, 0xd3, 0xae, 0x08, 0x0b,
	0x0e, 0x09, 0xa9, 0xa9, 0x54, 0xb6, 0xf2, 0x85, 0x2e, 0x69, 0x50, 0x65, 0xcf, 0xf8, 0x35, 0xd2,
	0xfc, 0xf6, 0xa1, 0x71, 0xea, 0xfa, 0x5e, 0xa0, 0x89, 0x18, 0x52, 0x6f, 0x3c, 0xd7, 0xf0, 0x4f,
	0x3b, 0xed, 0xc1, 0x32, 0x8f, 0x31, 0xdb, 0xdc, 0x4f, 0xbe, 0xe8, 0xb2, 0x3d, 0x73, 0xb0, 0x4b,
	0x58, 0x6b, 0xd3, 0xe8, 0x52, 0xb8, 0x24, 0x66, 0x77, 0xb4, 0x2a, 0x52, 0xb7, 0xd0, 0x3a, 0x57,
	0x2d, 0x0c, 0x3b, 0xe7, 0x8d, 0x57, 0x08, 0xb8, 0x4f, 0x91, 0x59, 0xdb, 0x37, 0x1a, 0xcb, 0x76,
	0xf2, 0x60, 0x6f, 0x61, 0xeb, 0xc2, 0x0b, 0x78, 0xcf, 0x9b, 0x50, 0x06, 0xf5, 0x00, 0xea, 0x61,
	0xfc, 0xd6, 0x74, 0xac, 0x24, 0x74, 0x24, 0x29, 0x49, 0x64, 0xaa, 0x82, 0xda, 0x8d, 0x0a, 0x8e,
	0x7f, 0x2c, 0xc2, 0x76, 0xfa, 0x2e, 0x35, 0x7b, 0x72, 0x8c, 0x27, 0x6a, 0xee, 0x74, 0x0c, 0x0b,
	0xee, 0xd8, 0x2a, 0xf0, 0xb1, 0x0a, 0x5e, 0xc0, 0x7a, 0x5e, 0xe3, 0x78, 0xaf, 0x29, 0x78, 0xb3,
	0x44, 0xf9, 0x56, 0xd1, 0xf1, 0xb0, 0x0a, 0xbe, 0x84, 0xd5, 0xac, 0x9e, 0x71, 0x57, 0xa3, 0xcc,
	0xf3, 0x65, 0x6d, 0xe8, 0x33, 0x9e, 0x45, 0x58, 0x05, 0x5b, 0x80, 0xf3, 0x82, 0xc6, 0xfb, 0x31,
	0x4a, 0xa9, 0xd0, 0x4b, 0x96, 0x7a, 0x03, 0x1b, 0x73, 0x5a, 0xc0, 0xbd, 0x18, 0xa9, 0x4c, 0x22,
	0x65, 0x6b, 0xb5, 0xc1, 0x2c, 0x3b, 0x73, 0x7c, 0x18, 0x03, 0xde, 0x22, 0x02, 0x4b, 0x93, 0xfb,
	0xda, 0xef, 0xcb, 0x31, 0xab, 0xe0, 0x09, 0xdc, 0x3d, 0x27, 0xee, 0x48, 0x6f, 0x98, 0x5f, 0xb4,
	0x88, 0xb2, 0x5c, 0xf1, 0x73, 0xd8, 0x99, 0x15, 0x67, 0x29, 0x2b, 0x1a, 0x3f, 0x5f, 0xfe, 0x19,
	0x0e, 0x6e, 0x55, 0x14, 0x3e, 0x8d, 0x97, 0xfa, 0x5d, 0xe1, 0xe5, 0x3b, 0x34, 0x61, 0x69, 0xaa,
	0x20, 0xdc, 0xd4, 0xf4, 0xa7, 0x2f, 0xdf, 0x4a, 0x9f, 0x3a, 0xab, 0xe0, 0x33, 0xb8, 0x93, 0x11,
	0x08, 0x9a, 0x71, 0x51, 0x91, 0x66, 0x72, 0x95, 0xaf, 0xfe, 0xbb, 0xaa, 0xab, 0x7f, 0xd4, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x20, 0x77, 0x28, 0xd2, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistrationAuthorityClient is the client API for RegistrationAuthority service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationAuthorityClient interface {
	NewRegistration(ctx context.Context, in *proto1.Registration, opts ...grpc.CallOption) (*proto1.Registration, error)
	NewAuthorization(ctx context.Context, in *NewAuthorizationRequest, opts ...grpc.CallOption) (*proto1.Authorization, error)
	NewCertificate(ctx context.Context, in *NewCertificateRequest, opts ...grpc.CallOption) (*proto1.Certificate, error)
	UpdateRegistration(ctx context.Context, in *UpdateRegistrationRequest, opts ...grpc.CallOption) (*proto1.Registration, error)
	PerformValidation(ctx context.Context, in *PerformValidationRequest, opts ...grpc.CallOption) (*proto1.Authorization, error)
	RevokeCertificateWithReg(ctx context.Context, in *RevokeCertificateWithRegRequest, opts ...grpc.CallOption) (*proto1.Empty, error)
	DeactivateRegistration(ctx context.Context, in *proto1.Registration, opts ...grpc.CallOption) (*proto1.Empty, error)
	DeactivateAuthorization(ctx context.Context, in *proto1.Authorization, opts ...grpc.CallOption) (*proto1.Empty, error)
	AdministrativelyRevokeCertificate(ctx context.Context, in *AdministrativelyRevokeCertificateRequest, opts ...grpc.CallOption) (*proto1.Empty, error)
	NewOrder(ctx context.Context, in *NewOrderRequest, opts ...grpc.CallOption) (*proto1.Order, error)
	FinalizeOrder(ctx context.Context, in *FinalizeOrderRequest, opts ...grpc.CallOption) (*proto1.Order, error)
}

type registrationAuthorityClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationAuthorityClient(cc *grpc.ClientConn) RegistrationAuthorityClient {
	return &registrationAuthorityClient{cc}
}

func (c *registrationAuthorityClient) NewRegistration(ctx context.Context, in *proto1.Registration, opts ...grpc.CallOption) (*proto1.Registration, error) {
	out := new(proto1.Registration)
	err := c.cc.Invoke(ctx, "/ra.RegistrationAuthority/NewRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationAuthorityClient) NewAuthorization(ctx context.Context, in *NewAuthorizationRequest, opts ...grpc.CallOption) (*proto1.Authorization, error) {
	out := new(proto1.Authorization)
	err := c.cc.Invoke(ctx, "/ra.RegistrationAuthority/NewAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationAuthorityClient) NewCertificate(ctx context.Context, in *NewCertificateRequest, opts ...grpc.CallOption) (*proto1.Certificate, error) {
	out := new(proto1.Certificate)
	err := c.cc.Invoke(ctx, "/ra.RegistrationAuthority/NewCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationAuthorityClient) UpdateRegistration(ctx context.Context, in *UpdateRegistrationRequest, opts ...grpc.CallOption) (*proto1.Registration, error) {
	out := new(proto1.Registration)
	err := c.cc.Invoke(ctx, "/ra.RegistrationAuthority/UpdateRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationAuthorityClient) PerformValidation(ctx context.Context, in *PerformValidationRequest, opts ...grpc.CallOption) (*proto1.Authorization, error) {
	out := new(proto1.Authorization)
	err := c.cc.Invoke(ctx, "/ra.RegistrationAuthority/PerformValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationAuthorityClient) RevokeCertificateWithReg(ctx context.Context, in *RevokeCertificateWithRegRequest, opts ...grpc.CallOption) (*proto1.Empty, error) {
	out := new(proto1.Empty)
	err := c.cc.Invoke(ctx, "/ra.RegistrationAuthority/RevokeCertificateWithReg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationAuthorityClient) DeactivateRegistration(ctx context.Context, in *proto1.Registration, opts ...grpc.CallOption) (*proto1.Empty, error) {
	out := new(proto1.Empty)
	err := c.cc.Invoke(ctx, "/ra.RegistrationAuthority/DeactivateRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationAuthorityClient) DeactivateAuthorization(ctx context.Context, in *proto1.Authorization, opts ...grpc.CallOption) (*proto1.Empty, error) {
	out := new(proto1.Empty)
	err := c.cc.Invoke(ctx, "/ra.RegistrationAuthority/DeactivateAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationAuthorityClient) AdministrativelyRevokeCertificate(ctx context.Context, in *AdministrativelyRevokeCertificateRequest, opts ...grpc.CallOption) (*proto1.Empty, error) {
	out := new(proto1.Empty)
	err := c.cc.Invoke(ctx, "/ra.RegistrationAuthority/AdministrativelyRevokeCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationAuthorityClient) NewOrder(ctx context.Context, in *NewOrderRequest, opts ...grpc.CallOption) (*proto1.Order, error) {
	out := new(proto1.Order)
	err := c.cc.Invoke(ctx, "/ra.RegistrationAuthority/NewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationAuthorityClient) FinalizeOrder(ctx context.Context, in *FinalizeOrderRequest, opts ...grpc.CallOption) (*proto1.Order, error) {
	out := new(proto1.Order)
	err := c.cc.Invoke(ctx, "/ra.RegistrationAuthority/FinalizeOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationAuthorityServer is the server API for RegistrationAuthority service.
type RegistrationAuthorityServer interface {
	NewRegistration(context.Context, *proto1.Registration) (*proto1.Registration, error)
	NewAuthorization(context.Context, *NewAuthorizationRequest) (*proto1.Authorization, error)
	NewCertificate(context.Context, *NewCertificateRequest) (*proto1.Certificate, error)
	UpdateRegistration(context.Context, *UpdateRegistrationRequest) (*proto1.Registration, error)
	PerformValidation(context.Context, *PerformValidationRequest) (*proto1.Authorization, error)
	RevokeCertificateWithReg(context.Context, *RevokeCertificateWithRegRequest) (*proto1.Empty, error)
	DeactivateRegistration(context.Context, *proto1.Registration) (*proto1.Empty, error)
	DeactivateAuthorization(context.Context, *proto1.Authorization) (*proto1.Empty, error)
	AdministrativelyRevokeCertificate(context.Context, *AdministrativelyRevokeCertificateRequest) (*proto1.Empty, error)
	NewOrder(context.Context, *NewOrderRequest) (*proto1.Order, error)
	FinalizeOrder(context.Context, *FinalizeOrderRequest) (*proto1.Order, error)
}

// UnimplementedRegistrationAuthorityServer can be embedded to have forward compatible implementations.
type UnimplementedRegistrationAuthorityServer struct {
}

func (*UnimplementedRegistrationAuthorityServer) NewRegistration(ctx context.Context, req *proto1.Registration) (*proto1.Registration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRegistration not implemented")
}
func (*UnimplementedRegistrationAuthorityServer) NewAuthorization(ctx context.Context, req *NewAuthorizationRequest) (*proto1.Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAuthorization not implemented")
}
func (*UnimplementedRegistrationAuthorityServer) NewCertificate(ctx context.Context, req *NewCertificateRequest) (*proto1.Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCertificate not implemented")
}
func (*UnimplementedRegistrationAuthorityServer) UpdateRegistration(ctx context.Context, req *UpdateRegistrationRequest) (*proto1.Registration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegistration not implemented")
}
func (*UnimplementedRegistrationAuthorityServer) PerformValidation(ctx context.Context, req *PerformValidationRequest) (*proto1.Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformValidation not implemented")
}
func (*UnimplementedRegistrationAuthorityServer) RevokeCertificateWithReg(ctx context.Context, req *RevokeCertificateWithRegRequest) (*proto1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCertificateWithReg not implemented")
}
func (*UnimplementedRegistrationAuthorityServer) DeactivateRegistration(ctx context.Context, req *proto1.Registration) (*proto1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateRegistration not implemented")
}
func (*UnimplementedRegistrationAuthorityServer) DeactivateAuthorization(ctx context.Context, req *proto1.Authorization) (*proto1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateAuthorization not implemented")
}
func (*UnimplementedRegistrationAuthorityServer) AdministrativelyRevokeCertificate(ctx context.Context, req *AdministrativelyRevokeCertificateRequest) (*proto1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdministrativelyRevokeCertificate not implemented")
}
func (*UnimplementedRegistrationAuthorityServer) NewOrder(ctx context.Context, req *NewOrderRequest) (*proto1.Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOrder not implemented")
}
func (*UnimplementedRegistrationAuthorityServer) FinalizeOrder(ctx context.Context, req *FinalizeOrderRequest) (*proto1.Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeOrder not implemented")
}

func RegisterRegistrationAuthorityServer(s *grpc.Server, srv RegistrationAuthorityServer) {
	s.RegisterService(&_RegistrationAuthority_serviceDesc, srv)
}

func _RegistrationAuthority_NewRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationAuthorityServer).NewRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ra.RegistrationAuthority/NewRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationAuthorityServer).NewRegistration(ctx, req.(*proto1.Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationAuthority_NewAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationAuthorityServer).NewAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ra.RegistrationAuthority/NewAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationAuthorityServer).NewAuthorization(ctx, req.(*NewAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationAuthority_NewCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationAuthorityServer).NewCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ra.RegistrationAuthority/NewCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationAuthorityServer).NewCertificate(ctx, req.(*NewCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationAuthority_UpdateRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationAuthorityServer).UpdateRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ra.RegistrationAuthority/UpdateRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationAuthorityServer).UpdateRegistration(ctx, req.(*UpdateRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationAuthority_PerformValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationAuthorityServer).PerformValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ra.RegistrationAuthority/PerformValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationAuthorityServer).PerformValidation(ctx, req.(*PerformValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationAuthority_RevokeCertificateWithReg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCertificateWithRegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationAuthorityServer).RevokeCertificateWithReg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ra.RegistrationAuthority/RevokeCertificateWithReg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationAuthorityServer).RevokeCertificateWithReg(ctx, req.(*RevokeCertificateWithRegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationAuthority_DeactivateRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationAuthorityServer).DeactivateRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ra.RegistrationAuthority/DeactivateRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationAuthorityServer).DeactivateRegistration(ctx, req.(*proto1.Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationAuthority_DeactivateAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Authorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationAuthorityServer).DeactivateAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ra.RegistrationAuthority/DeactivateAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationAuthorityServer).DeactivateAuthorization(ctx, req.(*proto1.Authorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationAuthority_AdministrativelyRevokeCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdministrativelyRevokeCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationAuthorityServer).AdministrativelyRevokeCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ra.RegistrationAuthority/AdministrativelyRevokeCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationAuthorityServer).AdministrativelyRevokeCertificate(ctx, req.(*AdministrativelyRevokeCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationAuthority_NewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationAuthorityServer).NewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ra.RegistrationAuthority/NewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationAuthorityServer).NewOrder(ctx, req.(*NewOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationAuthority_FinalizeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationAuthorityServer).FinalizeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ra.RegistrationAuthority/FinalizeOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationAuthorityServer).FinalizeOrder(ctx, req.(*FinalizeOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegistrationAuthority_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ra.RegistrationAuthority",
	HandlerType: (*RegistrationAuthorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewRegistration",
			Handler:    _RegistrationAuthority_NewRegistration_Handler,
		},
		{
			MethodName: "NewAuthorization",
			Handler:    _RegistrationAuthority_NewAuthorization_Handler,
		},
		{
			MethodName: "NewCertificate",
			Handler:    _RegistrationAuthority_NewCertificate_Handler,
		},
		{
			MethodName: "UpdateRegistration",
			Handler:    _RegistrationAuthority_UpdateRegistration_Handler,
		},
		{
			MethodName: "PerformValidation",
			Handler:    _RegistrationAuthority_PerformValidation_Handler,
		},
		{
			MethodName: "RevokeCertificateWithReg",
			Handler:    _RegistrationAuthority_RevokeCertificateWithReg_Handler,
		},
		{
			MethodName: "DeactivateRegistration",
			Handler:    _RegistrationAuthority_DeactivateRegistration_Handler,
		},
		{
			MethodName: "DeactivateAuthorization",
			Handler:    _RegistrationAuthority_DeactivateAuthorization_Handler,
		},
		{
			MethodName: "AdministrativelyRevokeCertificate",
			Handler:    _RegistrationAuthority_AdministrativelyRevokeCertificate_Handler,
		},
		{
			MethodName: "NewOrder",
			Handler:    _RegistrationAuthority_NewOrder_Handler,
		},
		{
			MethodName: "FinalizeOrder",
			Handler:    _RegistrationAuthority_FinalizeOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ra/proto/ra.proto",
}
